// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SaveSettings.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SaveSettings.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace Evrika {
class ProgSettings_BatColorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProgSettings_BatColor> {
} _ProgSettings_BatColor_default_instance_;
class ProgSettings_SignalLvlColorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProgSettings_SignalLvlColor> {
} _ProgSettings_SignalLvlColor_default_instance_;
class ProgSettingsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProgSettings> {
} _ProgSettings_default_instance_;
class SettingPackDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SettingPack> {
} _SettingPack_default_instance_;

namespace protobuf_SaveSettings_2eproto {


void TableStruct::Shutdown() {
  _ProgSettings_BatColor_default_instance_.Shutdown();
  _ProgSettings_SignalLvlColor_default_instance_.Shutdown();
  _ProgSettings_default_instance_.Shutdown();
  _SettingPack_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ProgSettings_BatColor_default_instance_.DefaultConstruct();
  _ProgSettings_SignalLvlColor_default_instance_.DefaultConstruct();
  _ProgSettings_default_instance_.DefaultConstruct();
  _SettingPack_default_instance_.DefaultConstruct();
  _ProgSettings_default_instance_.get_mutable()->btclr_ = const_cast< ::Evrika::ProgSettings_BatColor*>(
      ::Evrika::ProgSettings_BatColor::internal_default_instance());
  _ProgSettings_default_instance_.get_mutable()->sgnllvlclr_ = const_cast< ::Evrika::ProgSettings_SignalLvlColor*>(
      ::Evrika::ProgSettings_SignalLvlColor::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_SaveSettings_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProgSettings_BatColor::kColorLowFieldNumber;
const int ProgSettings_BatColor::kColorMidFieldNumber;
const int ProgSettings_BatColor::kColorHighFieldNumber;
const int ProgSettings_BatColor::kVoltLowFieldNumber;
const int ProgSettings_BatColor::kVoltMidFieldNumber;
const int ProgSettings_BatColor::kVoltHighFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProgSettings_BatColor::ProgSettings_BatColor()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SaveSettings_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Evrika.ProgSettings.BatColor)
}
ProgSettings_BatColor::ProgSettings_BatColor(const ProgSettings_BatColor& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&colorlow_, &from.colorlow_,
    reinterpret_cast<char*>(&colorhigh_) -
    reinterpret_cast<char*>(&colorlow_) + sizeof(colorhigh_));
  // @@protoc_insertion_point(copy_constructor:Evrika.ProgSettings.BatColor)
}

void ProgSettings_BatColor::SharedCtor() {
  ::memset(&colorlow_, 0, reinterpret_cast<char*>(&colorhigh_) -
    reinterpret_cast<char*>(&colorlow_) + sizeof(colorhigh_));
  _cached_size_ = 0;
}

ProgSettings_BatColor::~ProgSettings_BatColor() {
  // @@protoc_insertion_point(destructor:Evrika.ProgSettings.BatColor)
  SharedDtor();
}

void ProgSettings_BatColor::SharedDtor() {
}

void ProgSettings_BatColor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProgSettings_BatColor& ProgSettings_BatColor::default_instance() {
  protobuf_SaveSettings_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProgSettings_BatColor* ProgSettings_BatColor::New(::google::protobuf::Arena* arena) const {
  ProgSettings_BatColor* n = new ProgSettings_BatColor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProgSettings_BatColor::Clear() {
// @@protoc_insertion_point(message_clear_start:Evrika.ProgSettings.BatColor)
  ::memset(&colorlow_, 0, reinterpret_cast<char*>(&colorhigh_) -
    reinterpret_cast<char*>(&colorlow_) + sizeof(colorhigh_));
}

bool ProgSettings_BatColor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Evrika.ProgSettings.BatColor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 colorLow = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colorlow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 colorMid = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colormid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 colorHigh = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colorhigh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double voltLow = 4;
      case 4: {
        if (tag == 33u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &voltlow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double voltMid = 5;
      case 5: {
        if (tag == 41u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &voltmid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double voltHigh = 6;
      case 6: {
        if (tag == 49u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volthigh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Evrika.ProgSettings.BatColor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Evrika.ProgSettings.BatColor)
  return false;
#undef DO_
}

void ProgSettings_BatColor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Evrika.ProgSettings.BatColor)
  // int32 colorLow = 1;
  if (this->colorlow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->colorlow(), output);
  }

  // int32 colorMid = 2;
  if (this->colormid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->colormid(), output);
  }

  // int32 colorHigh = 3;
  if (this->colorhigh() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->colorhigh(), output);
  }

  // double voltLow = 4;
  if (this->voltlow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->voltlow(), output);
  }

  // double voltMid = 5;
  if (this->voltmid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->voltmid(), output);
  }

  // double voltHigh = 6;
  if (this->volthigh() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->volthigh(), output);
  }

  // @@protoc_insertion_point(serialize_end:Evrika.ProgSettings.BatColor)
}

size_t ProgSettings_BatColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Evrika.ProgSettings.BatColor)
  size_t total_size = 0;

  // int32 colorLow = 1;
  if (this->colorlow() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->colorlow());
  }

  // int32 colorMid = 2;
  if (this->colormid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->colormid());
  }

  // double voltLow = 4;
  if (this->voltlow() != 0) {
    total_size += 1 + 8;
  }

  // double voltMid = 5;
  if (this->voltmid() != 0) {
    total_size += 1 + 8;
  }

  // double voltHigh = 6;
  if (this->volthigh() != 0) {
    total_size += 1 + 8;
  }

  // int32 colorHigh = 3;
  if (this->colorhigh() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->colorhigh());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProgSettings_BatColor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProgSettings_BatColor*>(&from));
}

void ProgSettings_BatColor::MergeFrom(const ProgSettings_BatColor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Evrika.ProgSettings.BatColor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.colorlow() != 0) {
    set_colorlow(from.colorlow());
  }
  if (from.colormid() != 0) {
    set_colormid(from.colormid());
  }
  if (from.voltlow() != 0) {
    set_voltlow(from.voltlow());
  }
  if (from.voltmid() != 0) {
    set_voltmid(from.voltmid());
  }
  if (from.volthigh() != 0) {
    set_volthigh(from.volthigh());
  }
  if (from.colorhigh() != 0) {
    set_colorhigh(from.colorhigh());
  }
}

void ProgSettings_BatColor::CopyFrom(const ProgSettings_BatColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Evrika.ProgSettings.BatColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProgSettings_BatColor::IsInitialized() const {
  return true;
}

void ProgSettings_BatColor::Swap(ProgSettings_BatColor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProgSettings_BatColor::InternalSwap(ProgSettings_BatColor* other) {
  std::swap(colorlow_, other->colorlow_);
  std::swap(colormid_, other->colormid_);
  std::swap(voltlow_, other->voltlow_);
  std::swap(voltmid_, other->voltmid_);
  std::swap(volthigh_, other->volthigh_);
  std::swap(colorhigh_, other->colorhigh_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ProgSettings_BatColor::GetTypeName() const {
  return "Evrika.ProgSettings.BatColor";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProgSettings_BatColor

// int32 colorLow = 1;
void ProgSettings_BatColor::clear_colorlow() {
  colorlow_ = 0;
}
::google::protobuf::int32 ProgSettings_BatColor::colorlow() const {
  // @@protoc_insertion_point(field_get:Evrika.ProgSettings.BatColor.colorLow)
  return colorlow_;
}
void ProgSettings_BatColor::set_colorlow(::google::protobuf::int32 value) {
  
  colorlow_ = value;
  // @@protoc_insertion_point(field_set:Evrika.ProgSettings.BatColor.colorLow)
}

// int32 colorMid = 2;
void ProgSettings_BatColor::clear_colormid() {
  colormid_ = 0;
}
::google::protobuf::int32 ProgSettings_BatColor::colormid() const {
  // @@protoc_insertion_point(field_get:Evrika.ProgSettings.BatColor.colorMid)
  return colormid_;
}
void ProgSettings_BatColor::set_colormid(::google::protobuf::int32 value) {
  
  colormid_ = value;
  // @@protoc_insertion_point(field_set:Evrika.ProgSettings.BatColor.colorMid)
}

// int32 colorHigh = 3;
void ProgSettings_BatColor::clear_colorhigh() {
  colorhigh_ = 0;
}
::google::protobuf::int32 ProgSettings_BatColor::colorhigh() const {
  // @@protoc_insertion_point(field_get:Evrika.ProgSettings.BatColor.colorHigh)
  return colorhigh_;
}
void ProgSettings_BatColor::set_colorhigh(::google::protobuf::int32 value) {
  
  colorhigh_ = value;
  // @@protoc_insertion_point(field_set:Evrika.ProgSettings.BatColor.colorHigh)
}

// double voltLow = 4;
void ProgSettings_BatColor::clear_voltlow() {
  voltlow_ = 0;
}
double ProgSettings_BatColor::voltlow() const {
  // @@protoc_insertion_point(field_get:Evrika.ProgSettings.BatColor.voltLow)
  return voltlow_;
}
void ProgSettings_BatColor::set_voltlow(double value) {
  
  voltlow_ = value;
  // @@protoc_insertion_point(field_set:Evrika.ProgSettings.BatColor.voltLow)
}

// double voltMid = 5;
void ProgSettings_BatColor::clear_voltmid() {
  voltmid_ = 0;
}
double ProgSettings_BatColor::voltmid() const {
  // @@protoc_insertion_point(field_get:Evrika.ProgSettings.BatColor.voltMid)
  return voltmid_;
}
void ProgSettings_BatColor::set_voltmid(double value) {
  
  voltmid_ = value;
  // @@protoc_insertion_point(field_set:Evrika.ProgSettings.BatColor.voltMid)
}

// double voltHigh = 6;
void ProgSettings_BatColor::clear_volthigh() {
  volthigh_ = 0;
}
double ProgSettings_BatColor::volthigh() const {
  // @@protoc_insertion_point(field_get:Evrika.ProgSettings.BatColor.voltHigh)
  return volthigh_;
}
void ProgSettings_BatColor::set_volthigh(double value) {
  
  volthigh_ = value;
  // @@protoc_insertion_point(field_set:Evrika.ProgSettings.BatColor.voltHigh)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProgSettings_SignalLvlColor::kColorLowFieldNumber;
const int ProgSettings_SignalLvlColor::kColorMidFieldNumber;
const int ProgSettings_SignalLvlColor::kColorHighFieldNumber;
const int ProgSettings_SignalLvlColor::kLvlLowFieldNumber;
const int ProgSettings_SignalLvlColor::kLvlMidFieldNumber;
const int ProgSettings_SignalLvlColor::kLvlHighFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProgSettings_SignalLvlColor::ProgSettings_SignalLvlColor()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SaveSettings_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Evrika.ProgSettings.SignalLvlColor)
}
ProgSettings_SignalLvlColor::ProgSettings_SignalLvlColor(const ProgSettings_SignalLvlColor& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&colorlow_, &from.colorlow_,
    reinterpret_cast<char*>(&lvlhigh_) -
    reinterpret_cast<char*>(&colorlow_) + sizeof(lvlhigh_));
  // @@protoc_insertion_point(copy_constructor:Evrika.ProgSettings.SignalLvlColor)
}

void ProgSettings_SignalLvlColor::SharedCtor() {
  ::memset(&colorlow_, 0, reinterpret_cast<char*>(&lvlhigh_) -
    reinterpret_cast<char*>(&colorlow_) + sizeof(lvlhigh_));
  _cached_size_ = 0;
}

ProgSettings_SignalLvlColor::~ProgSettings_SignalLvlColor() {
  // @@protoc_insertion_point(destructor:Evrika.ProgSettings.SignalLvlColor)
  SharedDtor();
}

void ProgSettings_SignalLvlColor::SharedDtor() {
}

void ProgSettings_SignalLvlColor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProgSettings_SignalLvlColor& ProgSettings_SignalLvlColor::default_instance() {
  protobuf_SaveSettings_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProgSettings_SignalLvlColor* ProgSettings_SignalLvlColor::New(::google::protobuf::Arena* arena) const {
  ProgSettings_SignalLvlColor* n = new ProgSettings_SignalLvlColor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProgSettings_SignalLvlColor::Clear() {
// @@protoc_insertion_point(message_clear_start:Evrika.ProgSettings.SignalLvlColor)
  ::memset(&colorlow_, 0, reinterpret_cast<char*>(&lvlhigh_) -
    reinterpret_cast<char*>(&colorlow_) + sizeof(lvlhigh_));
}

bool ProgSettings_SignalLvlColor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Evrika.ProgSettings.SignalLvlColor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 colorLow = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colorlow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 colorMid = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colormid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 colorHigh = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colorhigh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lvlLow = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lvllow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lvlMid = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lvlmid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lvlHigh = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lvlhigh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Evrika.ProgSettings.SignalLvlColor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Evrika.ProgSettings.SignalLvlColor)
  return false;
#undef DO_
}

void ProgSettings_SignalLvlColor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Evrika.ProgSettings.SignalLvlColor)
  // int32 colorLow = 1;
  if (this->colorlow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->colorlow(), output);
  }

  // int32 colorMid = 2;
  if (this->colormid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->colormid(), output);
  }

  // int32 colorHigh = 3;
  if (this->colorhigh() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->colorhigh(), output);
  }

  // int32 lvlLow = 4;
  if (this->lvllow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lvllow(), output);
  }

  // int32 lvlMid = 5;
  if (this->lvlmid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lvlmid(), output);
  }

  // int32 lvlHigh = 6;
  if (this->lvlhigh() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lvlhigh(), output);
  }

  // @@protoc_insertion_point(serialize_end:Evrika.ProgSettings.SignalLvlColor)
}

size_t ProgSettings_SignalLvlColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Evrika.ProgSettings.SignalLvlColor)
  size_t total_size = 0;

  // int32 colorLow = 1;
  if (this->colorlow() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->colorlow());
  }

  // int32 colorMid = 2;
  if (this->colormid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->colormid());
  }

  // int32 colorHigh = 3;
  if (this->colorhigh() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->colorhigh());
  }

  // int32 lvlLow = 4;
  if (this->lvllow() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lvllow());
  }

  // int32 lvlMid = 5;
  if (this->lvlmid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lvlmid());
  }

  // int32 lvlHigh = 6;
  if (this->lvlhigh() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lvlhigh());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProgSettings_SignalLvlColor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProgSettings_SignalLvlColor*>(&from));
}

void ProgSettings_SignalLvlColor::MergeFrom(const ProgSettings_SignalLvlColor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Evrika.ProgSettings.SignalLvlColor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.colorlow() != 0) {
    set_colorlow(from.colorlow());
  }
  if (from.colormid() != 0) {
    set_colormid(from.colormid());
  }
  if (from.colorhigh() != 0) {
    set_colorhigh(from.colorhigh());
  }
  if (from.lvllow() != 0) {
    set_lvllow(from.lvllow());
  }
  if (from.lvlmid() != 0) {
    set_lvlmid(from.lvlmid());
  }
  if (from.lvlhigh() != 0) {
    set_lvlhigh(from.lvlhigh());
  }
}

void ProgSettings_SignalLvlColor::CopyFrom(const ProgSettings_SignalLvlColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Evrika.ProgSettings.SignalLvlColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProgSettings_SignalLvlColor::IsInitialized() const {
  return true;
}

void ProgSettings_SignalLvlColor::Swap(ProgSettings_SignalLvlColor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProgSettings_SignalLvlColor::InternalSwap(ProgSettings_SignalLvlColor* other) {
  std::swap(colorlow_, other->colorlow_);
  std::swap(colormid_, other->colormid_);
  std::swap(colorhigh_, other->colorhigh_);
  std::swap(lvllow_, other->lvllow_);
  std::swap(lvlmid_, other->lvlmid_);
  std::swap(lvlhigh_, other->lvlhigh_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ProgSettings_SignalLvlColor::GetTypeName() const {
  return "Evrika.ProgSettings.SignalLvlColor";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProgSettings_SignalLvlColor

// int32 colorLow = 1;
void ProgSettings_SignalLvlColor::clear_colorlow() {
  colorlow_ = 0;
}
::google::protobuf::int32 ProgSettings_SignalLvlColor::colorlow() const {
  // @@protoc_insertion_point(field_get:Evrika.ProgSettings.SignalLvlColor.colorLow)
  return colorlow_;
}
void ProgSettings_SignalLvlColor::set_colorlow(::google::protobuf::int32 value) {
  
  colorlow_ = value;
  // @@protoc_insertion_point(field_set:Evrika.ProgSettings.SignalLvlColor.colorLow)
}

// int32 colorMid = 2;
void ProgSettings_SignalLvlColor::clear_colormid() {
  colormid_ = 0;
}
::google::protobuf::int32 ProgSettings_SignalLvlColor::colormid() const {
  // @@protoc_insertion_point(field_get:Evrika.ProgSettings.SignalLvlColor.colorMid)
  return colormid_;
}
void ProgSettings_SignalLvlColor::set_colormid(::google::protobuf::int32 value) {
  
  colormid_ = value;
  // @@protoc_insertion_point(field_set:Evrika.ProgSettings.SignalLvlColor.colorMid)
}

// int32 colorHigh = 3;
void ProgSettings_SignalLvlColor::clear_colorhigh() {
  colorhigh_ = 0;
}
::google::protobuf::int32 ProgSettings_SignalLvlColor::colorhigh() const {
  // @@protoc_insertion_point(field_get:Evrika.ProgSettings.SignalLvlColor.colorHigh)
  return colorhigh_;
}
void ProgSettings_SignalLvlColor::set_colorhigh(::google::protobuf::int32 value) {
  
  colorhigh_ = value;
  // @@protoc_insertion_point(field_set:Evrika.ProgSettings.SignalLvlColor.colorHigh)
}

// int32 lvlLow = 4;
void ProgSettings_SignalLvlColor::clear_lvllow() {
  lvllow_ = 0;
}
::google::protobuf::int32 ProgSettings_SignalLvlColor::lvllow() const {
  // @@protoc_insertion_point(field_get:Evrika.ProgSettings.SignalLvlColor.lvlLow)
  return lvllow_;
}
void ProgSettings_SignalLvlColor::set_lvllow(::google::protobuf::int32 value) {
  
  lvllow_ = value;
  // @@protoc_insertion_point(field_set:Evrika.ProgSettings.SignalLvlColor.lvlLow)
}

// int32 lvlMid = 5;
void ProgSettings_SignalLvlColor::clear_lvlmid() {
  lvlmid_ = 0;
}
::google::protobuf::int32 ProgSettings_SignalLvlColor::lvlmid() const {
  // @@protoc_insertion_point(field_get:Evrika.ProgSettings.SignalLvlColor.lvlMid)
  return lvlmid_;
}
void ProgSettings_SignalLvlColor::set_lvlmid(::google::protobuf::int32 value) {
  
  lvlmid_ = value;
  // @@protoc_insertion_point(field_set:Evrika.ProgSettings.SignalLvlColor.lvlMid)
}

// int32 lvlHigh = 6;
void ProgSettings_SignalLvlColor::clear_lvlhigh() {
  lvlhigh_ = 0;
}
::google::protobuf::int32 ProgSettings_SignalLvlColor::lvlhigh() const {
  // @@protoc_insertion_point(field_get:Evrika.ProgSettings.SignalLvlColor.lvlHigh)
  return lvlhigh_;
}
void ProgSettings_SignalLvlColor::set_lvlhigh(::google::protobuf::int32 value) {
  
  lvlhigh_ = value;
  // @@protoc_insertion_point(field_set:Evrika.ProgSettings.SignalLvlColor.lvlHigh)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProgSettings::kBtclrFieldNumber;
const int ProgSettings::kSgnllvlclrFieldNumber;
const int ProgSettings::kMapProviderFieldNumber;
const int ProgSettings::kMapPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProgSettings::ProgSettings()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SaveSettings_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Evrika.ProgSettings)
}
ProgSettings::ProgSettings(const ProgSettings& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mappath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mappath().size() > 0) {
    mappath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mappath_);
  }
  if (from.has_btclr()) {
    btclr_ = new ::Evrika::ProgSettings_BatColor(*from.btclr_);
  } else {
    btclr_ = NULL;
  }
  if (from.has_sgnllvlclr()) {
    sgnllvlclr_ = new ::Evrika::ProgSettings_SignalLvlColor(*from.sgnllvlclr_);
  } else {
    sgnllvlclr_ = NULL;
  }
  mapprovider_ = from.mapprovider_;
  // @@protoc_insertion_point(copy_constructor:Evrika.ProgSettings)
}

void ProgSettings::SharedCtor() {
  mappath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&btclr_, 0, reinterpret_cast<char*>(&mapprovider_) -
    reinterpret_cast<char*>(&btclr_) + sizeof(mapprovider_));
  _cached_size_ = 0;
}

ProgSettings::~ProgSettings() {
  // @@protoc_insertion_point(destructor:Evrika.ProgSettings)
  SharedDtor();
}

void ProgSettings::SharedDtor() {
  mappath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete btclr_;
  }
  if (this != internal_default_instance()) {
    delete sgnllvlclr_;
  }
}

void ProgSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProgSettings& ProgSettings::default_instance() {
  protobuf_SaveSettings_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProgSettings* ProgSettings::New(::google::protobuf::Arena* arena) const {
  ProgSettings* n = new ProgSettings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProgSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:Evrika.ProgSettings)
  mappath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && btclr_ != NULL) {
    delete btclr_;
  }
  btclr_ = NULL;
  if (GetArenaNoVirtual() == NULL && sgnllvlclr_ != NULL) {
    delete sgnllvlclr_;
  }
  sgnllvlclr_ = NULL;
  mapprovider_ = 0u;
}

bool ProgSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Evrika.ProgSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Evrika.ProgSettings.BatColor btclr = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_btclr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Evrika.ProgSettings.SignalLvlColor sgnllvlclr = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sgnllvlclr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 MapProvider = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapprovider_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string MapPath = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mappath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mappath().data(), this->mappath().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Evrika.ProgSettings.MapPath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Evrika.ProgSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Evrika.ProgSettings)
  return false;
#undef DO_
}

void ProgSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Evrika.ProgSettings)
  // .Evrika.ProgSettings.BatColor btclr = 1;
  if (this->has_btclr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->btclr_, output);
  }

  // .Evrika.ProgSettings.SignalLvlColor sgnllvlclr = 2;
  if (this->has_sgnllvlclr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->sgnllvlclr_, output);
  }

  // uint32 MapProvider = 3;
  if (this->mapprovider() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mapprovider(), output);
  }

  // string MapPath = 4;
  if (this->mappath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mappath().data(), this->mappath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Evrika.ProgSettings.MapPath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mappath(), output);
  }

  // @@protoc_insertion_point(serialize_end:Evrika.ProgSettings)
}

size_t ProgSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Evrika.ProgSettings)
  size_t total_size = 0;

  // string MapPath = 4;
  if (this->mappath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mappath());
  }

  // .Evrika.ProgSettings.BatColor btclr = 1;
  if (this->has_btclr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->btclr_);
  }

  // .Evrika.ProgSettings.SignalLvlColor sgnllvlclr = 2;
  if (this->has_sgnllvlclr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sgnllvlclr_);
  }

  // uint32 MapProvider = 3;
  if (this->mapprovider() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mapprovider());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProgSettings::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProgSettings*>(&from));
}

void ProgSettings::MergeFrom(const ProgSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Evrika.ProgSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.mappath().size() > 0) {

    mappath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mappath_);
  }
  if (from.has_btclr()) {
    mutable_btclr()->::Evrika::ProgSettings_BatColor::MergeFrom(from.btclr());
  }
  if (from.has_sgnllvlclr()) {
    mutable_sgnllvlclr()->::Evrika::ProgSettings_SignalLvlColor::MergeFrom(from.sgnllvlclr());
  }
  if (from.mapprovider() != 0) {
    set_mapprovider(from.mapprovider());
  }
}

void ProgSettings::CopyFrom(const ProgSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Evrika.ProgSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProgSettings::IsInitialized() const {
  return true;
}

void ProgSettings::Swap(ProgSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProgSettings::InternalSwap(ProgSettings* other) {
  mappath_.Swap(&other->mappath_);
  std::swap(btclr_, other->btclr_);
  std::swap(sgnllvlclr_, other->sgnllvlclr_);
  std::swap(mapprovider_, other->mapprovider_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ProgSettings::GetTypeName() const {
  return "Evrika.ProgSettings";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProgSettings

// .Evrika.ProgSettings.BatColor btclr = 1;
bool ProgSettings::has_btclr() const {
  return this != internal_default_instance() && btclr_ != NULL;
}
void ProgSettings::clear_btclr() {
  if (GetArenaNoVirtual() == NULL && btclr_ != NULL) delete btclr_;
  btclr_ = NULL;
}
const ::Evrika::ProgSettings_BatColor& ProgSettings::btclr() const {
  // @@protoc_insertion_point(field_get:Evrika.ProgSettings.btclr)
  return btclr_ != NULL ? *btclr_
                         : *::Evrika::ProgSettings_BatColor::internal_default_instance();
}
::Evrika::ProgSettings_BatColor* ProgSettings::mutable_btclr() {
  
  if (btclr_ == NULL) {
    btclr_ = new ::Evrika::ProgSettings_BatColor;
  }
  // @@protoc_insertion_point(field_mutable:Evrika.ProgSettings.btclr)
  return btclr_;
}
::Evrika::ProgSettings_BatColor* ProgSettings::release_btclr() {
  // @@protoc_insertion_point(field_release:Evrika.ProgSettings.btclr)
  
  ::Evrika::ProgSettings_BatColor* temp = btclr_;
  btclr_ = NULL;
  return temp;
}
void ProgSettings::set_allocated_btclr(::Evrika::ProgSettings_BatColor* btclr) {
  delete btclr_;
  btclr_ = btclr;
  if (btclr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Evrika.ProgSettings.btclr)
}

// .Evrika.ProgSettings.SignalLvlColor sgnllvlclr = 2;
bool ProgSettings::has_sgnllvlclr() const {
  return this != internal_default_instance() && sgnllvlclr_ != NULL;
}
void ProgSettings::clear_sgnllvlclr() {
  if (GetArenaNoVirtual() == NULL && sgnllvlclr_ != NULL) delete sgnllvlclr_;
  sgnllvlclr_ = NULL;
}
const ::Evrika::ProgSettings_SignalLvlColor& ProgSettings::sgnllvlclr() const {
  // @@protoc_insertion_point(field_get:Evrika.ProgSettings.sgnllvlclr)
  return sgnllvlclr_ != NULL ? *sgnllvlclr_
                         : *::Evrika::ProgSettings_SignalLvlColor::internal_default_instance();
}
::Evrika::ProgSettings_SignalLvlColor* ProgSettings::mutable_sgnllvlclr() {
  
  if (sgnllvlclr_ == NULL) {
    sgnllvlclr_ = new ::Evrika::ProgSettings_SignalLvlColor;
  }
  // @@protoc_insertion_point(field_mutable:Evrika.ProgSettings.sgnllvlclr)
  return sgnllvlclr_;
}
::Evrika::ProgSettings_SignalLvlColor* ProgSettings::release_sgnllvlclr() {
  // @@protoc_insertion_point(field_release:Evrika.ProgSettings.sgnllvlclr)
  
  ::Evrika::ProgSettings_SignalLvlColor* temp = sgnllvlclr_;
  sgnllvlclr_ = NULL;
  return temp;
}
void ProgSettings::set_allocated_sgnllvlclr(::Evrika::ProgSettings_SignalLvlColor* sgnllvlclr) {
  delete sgnllvlclr_;
  sgnllvlclr_ = sgnllvlclr;
  if (sgnllvlclr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Evrika.ProgSettings.sgnllvlclr)
}

// uint32 MapProvider = 3;
void ProgSettings::clear_mapprovider() {
  mapprovider_ = 0u;
}
::google::protobuf::uint32 ProgSettings::mapprovider() const {
  // @@protoc_insertion_point(field_get:Evrika.ProgSettings.MapProvider)
  return mapprovider_;
}
void ProgSettings::set_mapprovider(::google::protobuf::uint32 value) {
  
  mapprovider_ = value;
  // @@protoc_insertion_point(field_set:Evrika.ProgSettings.MapProvider)
}

// string MapPath = 4;
void ProgSettings::clear_mappath() {
  mappath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProgSettings::mappath() const {
  // @@protoc_insertion_point(field_get:Evrika.ProgSettings.MapPath)
  return mappath_.GetNoArena();
}
void ProgSettings::set_mappath(const ::std::string& value) {
  
  mappath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Evrika.ProgSettings.MapPath)
}
#if LANG_CXX11
void ProgSettings::set_mappath(::std::string&& value) {
  
  mappath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Evrika.ProgSettings.MapPath)
}
#endif
void ProgSettings::set_mappath(const char* value) {
  
  mappath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Evrika.ProgSettings.MapPath)
}
void ProgSettings::set_mappath(const char* value, size_t size) {
  
  mappath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Evrika.ProgSettings.MapPath)
}
::std::string* ProgSettings::mutable_mappath() {
  
  // @@protoc_insertion_point(field_mutable:Evrika.ProgSettings.MapPath)
  return mappath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProgSettings::release_mappath() {
  // @@protoc_insertion_point(field_release:Evrika.ProgSettings.MapPath)
  
  return mappath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProgSettings::set_allocated_mappath(::std::string* mappath) {
  if (mappath != NULL) {
    
  } else {
    
  }
  mappath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mappath);
  // @@protoc_insertion_point(field_set_allocated:Evrika.ProgSettings.MapPath)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SettingPack::kPrgstngsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SettingPack::SettingPack()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SaveSettings_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Evrika.SettingPack)
}
SettingPack::SettingPack(const SettingPack& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      prgstngs_(from.prgstngs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Evrika.SettingPack)
}

void SettingPack::SharedCtor() {
  _cached_size_ = 0;
}

SettingPack::~SettingPack() {
  // @@protoc_insertion_point(destructor:Evrika.SettingPack)
  SharedDtor();
}

void SettingPack::SharedDtor() {
}

void SettingPack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SettingPack& SettingPack::default_instance() {
  protobuf_SaveSettings_2eproto::InitDefaults();
  return *internal_default_instance();
}

SettingPack* SettingPack::New(::google::protobuf::Arena* arena) const {
  SettingPack* n = new SettingPack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SettingPack::Clear() {
// @@protoc_insertion_point(message_clear_start:Evrika.SettingPack)
  prgstngs_.Clear();
}

bool SettingPack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Evrika.SettingPack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Evrika.ProgSettings prgstngs = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_prgstngs()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Evrika.SettingPack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Evrika.SettingPack)
  return false;
#undef DO_
}

void SettingPack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Evrika.SettingPack)
  // repeated .Evrika.ProgSettings prgstngs = 1;
  for (unsigned int i = 0, n = this->prgstngs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->prgstngs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Evrika.SettingPack)
}

size_t SettingPack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Evrika.SettingPack)
  size_t total_size = 0;

  // repeated .Evrika.ProgSettings prgstngs = 1;
  {
    unsigned int count = this->prgstngs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prgstngs(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SettingPack::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SettingPack*>(&from));
}

void SettingPack::MergeFrom(const SettingPack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Evrika.SettingPack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prgstngs_.MergeFrom(from.prgstngs_);
}

void SettingPack::CopyFrom(const SettingPack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Evrika.SettingPack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingPack::IsInitialized() const {
  return true;
}

void SettingPack::Swap(SettingPack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SettingPack::InternalSwap(SettingPack* other) {
  prgstngs_.UnsafeArenaSwap(&other->prgstngs_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SettingPack::GetTypeName() const {
  return "Evrika.SettingPack";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SettingPack

// repeated .Evrika.ProgSettings prgstngs = 1;
int SettingPack::prgstngs_size() const {
  return prgstngs_.size();
}
void SettingPack::clear_prgstngs() {
  prgstngs_.Clear();
}
const ::Evrika::ProgSettings& SettingPack::prgstngs(int index) const {
  // @@protoc_insertion_point(field_get:Evrika.SettingPack.prgstngs)
  return prgstngs_.Get(index);
}
::Evrika::ProgSettings* SettingPack::mutable_prgstngs(int index) {
  // @@protoc_insertion_point(field_mutable:Evrika.SettingPack.prgstngs)
  return prgstngs_.Mutable(index);
}
::Evrika::ProgSettings* SettingPack::add_prgstngs() {
  // @@protoc_insertion_point(field_add:Evrika.SettingPack.prgstngs)
  return prgstngs_.Add();
}
::google::protobuf::RepeatedPtrField< ::Evrika::ProgSettings >*
SettingPack::mutable_prgstngs() {
  // @@protoc_insertion_point(field_mutable_list:Evrika.SettingPack.prgstngs)
  return &prgstngs_;
}
const ::google::protobuf::RepeatedPtrField< ::Evrika::ProgSettings >&
SettingPack::prgstngs() const {
  // @@protoc_insertion_point(field_list:Evrika.SettingPack.prgstngs)
  return prgstngs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Evrika

// @@protoc_insertion_point(global_scope)
