// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EventLog.proto
#define PROTOBUF_USE_DLLS
#ifndef PROTOBUF_EventLog_2eproto__INCLUDED
#define PROTOBUF_EventLog_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
namespace EvLog {
class Device;
class DeviceDefaultTypeInternal;
extern DeviceDefaultTypeInternal _Device_default_instance_;
class Device_mode1;
class Device_mode1DefaultTypeInternal;
extern Device_mode1DefaultTypeInternal _Device_mode1_default_instance_;
class Device_mode2;
class Device_mode2DefaultTypeInternal;
extern Device_mode2DefaultTypeInternal _Device_mode2_default_instance_;
class Device_mode3;
class Device_mode3DefaultTypeInternal;
extern Device_mode3DefaultTypeInternal _Device_mode3_default_instance_;
class Device_mode3_inSleep;
class Device_mode3_inSleepDefaultTypeInternal;
extern Device_mode3_inSleepDefaultTypeInternal _Device_mode3_inSleep_default_instance_;
class Device_mode3_outSleep;
class Device_mode3_outSleepDefaultTypeInternal;
extern Device_mode3_outSleepDefaultTypeInternal _Device_mode3_outSleep_default_instance_;
class Device_mode4;
class Device_mode4DefaultTypeInternal;
extern Device_mode4DefaultTypeInternal _Device_mode4_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class EventLog;
class EventLogDefaultTypeInternal;
extern EventLogDefaultTypeInternal _EventLog_default_instance_;
class TD;
class TDDefaultTypeInternal;
extern TDDefaultTypeInternal _TD_default_instance_;
}  // namespace EvLog

namespace EvLog {

namespace protobuf_EventLog_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_EventLog_2eproto

// ===================================================================

class Device_mode1 : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:EvLog.Device.mode1) */ {
 public:
  Device_mode1();
  virtual ~Device_mode1();

  Device_mode1(const Device_mode1& from);

  inline Device_mode1& operator=(const Device_mode1& from) {
    CopyFrom(from);
    return *this;
  }

  static const Device_mode1& default_instance();

  static inline const Device_mode1* internal_default_instance() {
    return reinterpret_cast<const Device_mode1*>(
               &_Device_mode1_default_instance_);
  }

  void Swap(Device_mode1* other);

  // implements Message ----------------------------------------------

  inline Device_mode1* New() const PROTOBUF_FINAL { return New(NULL); }

  Device_mode1* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Device_mode1& from);
  void MergeFrom(const Device_mode1& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Device_mode1* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double lat = 1;
  void clear_lat();
  static const int kLatFieldNumber = 1;
  double lat() const;
  void set_lat(double value);

  // double lon = 2;
  void clear_lon();
  static const int kLonFieldNumber = 2;
  double lon() const;
  void set_lon(double value);

  // int32 r = 3;
  void clear_r();
  static const int kRFieldNumber = 3;
  ::google::protobuf::int32 r() const;
  void set_r(::google::protobuf::int32 value);

  // uint32 Year = 4;
  void clear_year();
  static const int kYearFieldNumber = 4;
  ::google::protobuf::uint32 year() const;
  void set_year(::google::protobuf::uint32 value);

  // uint32 Month = 5;
  void clear_month();
  static const int kMonthFieldNumber = 5;
  ::google::protobuf::uint32 month() const;
  void set_month(::google::protobuf::uint32 value);

  // uint32 Day = 6;
  void clear_day();
  static const int kDayFieldNumber = 6;
  ::google::protobuf::uint32 day() const;
  void set_day(::google::protobuf::uint32 value);

  // uint32 Hour = 7;
  void clear_hour();
  static const int kHourFieldNumber = 7;
  ::google::protobuf::uint32 hour() const;
  void set_hour(::google::protobuf::uint32 value);

  // uint32 Minute = 8;
  void clear_minute();
  static const int kMinuteFieldNumber = 8;
  ::google::protobuf::uint32 minute() const;
  void set_minute(::google::protobuf::uint32 value);

  // uint32 Second = 9;
  void clear_second();
  static const int kSecondFieldNumber = 9;
  ::google::protobuf::uint32 second() const;
  void set_second(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:EvLog.Device.mode1)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  double lat_;
  double lon_;
  ::google::protobuf::int32 r_;
  ::google::protobuf::uint32 year_;
  ::google::protobuf::uint32 month_;
  ::google::protobuf::uint32 day_;
  ::google::protobuf::uint32 hour_;
  ::google::protobuf::uint32 minute_;
  ::google::protobuf::uint32 second_;
  mutable int _cached_size_;
  friend struct  protobuf_EventLog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Device_mode2 : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:EvLog.Device.mode2) */ {
 public:
  Device_mode2();
  virtual ~Device_mode2();

  Device_mode2(const Device_mode2& from);

  inline Device_mode2& operator=(const Device_mode2& from) {
    CopyFrom(from);
    return *this;
  }

  static const Device_mode2& default_instance();

  static inline const Device_mode2* internal_default_instance() {
    return reinterpret_cast<const Device_mode2*>(
               &_Device_mode2_default_instance_);
  }

  void Swap(Device_mode2* other);

  // implements Message ----------------------------------------------

  inline Device_mode2* New() const PROTOBUF_FINAL { return New(NULL); }

  Device_mode2* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Device_mode2& from);
  void MergeFrom(const Device_mode2& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Device_mode2* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 channel = 1;
  void clear_channel();
  static const int kChannelFieldNumber = 1;
  ::google::protobuf::uint32 channel() const;
  void set_channel(::google::protobuf::uint32 value);

  // uint32 tPulse = 2;
  void clear_tpulse();
  static const int kTPulseFieldNumber = 2;
  ::google::protobuf::uint32 tpulse() const;
  void set_tpulse(::google::protobuf::uint32 value);

  // uint32 tWait = 3;
  void clear_twait();
  static const int kTWaitFieldNumber = 3;
  ::google::protobuf::uint32 twait() const;
  void set_twait(::google::protobuf::uint32 value);

  // uint32 nPulse = 4;
  void clear_npulse();
  static const int kNPulseFieldNumber = 4;
  ::google::protobuf::uint32 npulse() const;
  void set_npulse(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:EvLog.Device.mode2)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::uint32 channel_;
  ::google::protobuf::uint32 tpulse_;
  ::google::protobuf::uint32 twait_;
  ::google::protobuf::uint32 npulse_;
  mutable int _cached_size_;
  friend struct  protobuf_EventLog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Device_mode3_inSleep : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:EvLog.Device.mode3.inSleep) */ {
 public:
  Device_mode3_inSleep();
  virtual ~Device_mode3_inSleep();

  Device_mode3_inSleep(const Device_mode3_inSleep& from);

  inline Device_mode3_inSleep& operator=(const Device_mode3_inSleep& from) {
    CopyFrom(from);
    return *this;
  }

  static const Device_mode3_inSleep& default_instance();

  static inline const Device_mode3_inSleep* internal_default_instance() {
    return reinterpret_cast<const Device_mode3_inSleep*>(
               &_Device_mode3_inSleep_default_instance_);
  }

  void Swap(Device_mode3_inSleep* other);

  // implements Message ----------------------------------------------

  inline Device_mode3_inSleep* New() const PROTOBUF_FINAL { return New(NULL); }

  Device_mode3_inSleep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Device_mode3_inSleep& from);
  void MergeFrom(const Device_mode3_inSleep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Device_mode3_inSleep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 Year = 1;
  void clear_year();
  static const int kYearFieldNumber = 1;
  ::google::protobuf::uint32 year() const;
  void set_year(::google::protobuf::uint32 value);

  // uint32 Month = 2;
  void clear_month();
  static const int kMonthFieldNumber = 2;
  ::google::protobuf::uint32 month() const;
  void set_month(::google::protobuf::uint32 value);

  // uint32 Day = 3;
  void clear_day();
  static const int kDayFieldNumber = 3;
  ::google::protobuf::uint32 day() const;
  void set_day(::google::protobuf::uint32 value);

  // uint32 Hour = 4;
  void clear_hour();
  static const int kHourFieldNumber = 4;
  ::google::protobuf::uint32 hour() const;
  void set_hour(::google::protobuf::uint32 value);

  // uint32 Minute = 5;
  void clear_minute();
  static const int kMinuteFieldNumber = 5;
  ::google::protobuf::uint32 minute() const;
  void set_minute(::google::protobuf::uint32 value);

  // uint32 Second = 6;
  void clear_second();
  static const int kSecondFieldNumber = 6;
  ::google::protobuf::uint32 second() const;
  void set_second(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:EvLog.Device.mode3.inSleep)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::uint32 year_;
  ::google::protobuf::uint32 month_;
  ::google::protobuf::uint32 day_;
  ::google::protobuf::uint32 hour_;
  ::google::protobuf::uint32 minute_;
  ::google::protobuf::uint32 second_;
  mutable int _cached_size_;
  friend struct  protobuf_EventLog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Device_mode3_outSleep : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:EvLog.Device.mode3.outSleep) */ {
 public:
  Device_mode3_outSleep();
  virtual ~Device_mode3_outSleep();

  Device_mode3_outSleep(const Device_mode3_outSleep& from);

  inline Device_mode3_outSleep& operator=(const Device_mode3_outSleep& from) {
    CopyFrom(from);
    return *this;
  }

  static const Device_mode3_outSleep& default_instance();

  static inline const Device_mode3_outSleep* internal_default_instance() {
    return reinterpret_cast<const Device_mode3_outSleep*>(
               &_Device_mode3_outSleep_default_instance_);
  }

  void Swap(Device_mode3_outSleep* other);

  // implements Message ----------------------------------------------

  inline Device_mode3_outSleep* New() const PROTOBUF_FINAL { return New(NULL); }

  Device_mode3_outSleep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Device_mode3_outSleep& from);
  void MergeFrom(const Device_mode3_outSleep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Device_mode3_outSleep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 Year = 1;
  void clear_year();
  static const int kYearFieldNumber = 1;
  ::google::protobuf::uint32 year() const;
  void set_year(::google::protobuf::uint32 value);

  // uint32 Month = 2;
  void clear_month();
  static const int kMonthFieldNumber = 2;
  ::google::protobuf::uint32 month() const;
  void set_month(::google::protobuf::uint32 value);

  // uint32 Day = 3;
  void clear_day();
  static const int kDayFieldNumber = 3;
  ::google::protobuf::uint32 day() const;
  void set_day(::google::protobuf::uint32 value);

  // uint32 Hour = 4;
  void clear_hour();
  static const int kHourFieldNumber = 4;
  ::google::protobuf::uint32 hour() const;
  void set_hour(::google::protobuf::uint32 value);

  // uint32 Minute = 5;
  void clear_minute();
  static const int kMinuteFieldNumber = 5;
  ::google::protobuf::uint32 minute() const;
  void set_minute(::google::protobuf::uint32 value);

  // uint32 Second = 6;
  void clear_second();
  static const int kSecondFieldNumber = 6;
  ::google::protobuf::uint32 second() const;
  void set_second(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:EvLog.Device.mode3.outSleep)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::uint32 year_;
  ::google::protobuf::uint32 month_;
  ::google::protobuf::uint32 day_;
  ::google::protobuf::uint32 hour_;
  ::google::protobuf::uint32 minute_;
  ::google::protobuf::uint32 second_;
  mutable int _cached_size_;
  friend struct  protobuf_EventLog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Device_mode3 : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:EvLog.Device.mode3) */ {
 public:
  Device_mode3();
  virtual ~Device_mode3();

  Device_mode3(const Device_mode3& from);

  inline Device_mode3& operator=(const Device_mode3& from) {
    CopyFrom(from);
    return *this;
  }

  static const Device_mode3& default_instance();

  static inline const Device_mode3* internal_default_instance() {
    return reinterpret_cast<const Device_mode3*>(
               &_Device_mode3_default_instance_);
  }

  void Swap(Device_mode3* other);

  // implements Message ----------------------------------------------

  inline Device_mode3* New() const PROTOBUF_FINAL { return New(NULL); }

  Device_mode3* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Device_mode3& from);
  void MergeFrom(const Device_mode3& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Device_mode3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Device_mode3_inSleep inSleep;
  typedef Device_mode3_outSleep outSleep;

  // accessors -------------------------------------------------------

  // .EvLog.Device.mode3.inSleep inslp = 2;
  bool has_inslp() const;
  void clear_inslp();
  static const int kInslpFieldNumber = 2;
  const ::EvLog::Device_mode3_inSleep& inslp() const;
  ::EvLog::Device_mode3_inSleep* mutable_inslp();
  ::EvLog::Device_mode3_inSleep* release_inslp();
  void set_allocated_inslp(::EvLog::Device_mode3_inSleep* inslp);

  // .EvLog.Device.mode3.outSleep outslp = 3;
  bool has_outslp() const;
  void clear_outslp();
  static const int kOutslpFieldNumber = 3;
  const ::EvLog::Device_mode3_outSleep& outslp() const;
  ::EvLog::Device_mode3_outSleep* mutable_outslp();
  ::EvLog::Device_mode3_outSleep* release_outslp();
  void set_allocated_outslp(::EvLog::Device_mode3_outSleep* outslp);

  // uint32 ModeOut = 1;
  void clear_modeout();
  static const int kModeOutFieldNumber = 1;
  ::google::protobuf::uint32 modeout() const;
  void set_modeout(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:EvLog.Device.mode3)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::EvLog::Device_mode3_inSleep* inslp_;
  ::EvLog::Device_mode3_outSleep* outslp_;
  ::google::protobuf::uint32 modeout_;
  mutable int _cached_size_;
  friend struct  protobuf_EventLog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Device_mode4 : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:EvLog.Device.mode4) */ {
 public:
  Device_mode4();
  virtual ~Device_mode4();

  Device_mode4(const Device_mode4& from);

  inline Device_mode4& operator=(const Device_mode4& from) {
    CopyFrom(from);
    return *this;
  }

  static const Device_mode4& default_instance();

  static inline const Device_mode4* internal_default_instance() {
    return reinterpret_cast<const Device_mode4*>(
               &_Device_mode4_default_instance_);
  }

  void Swap(Device_mode4* other);

  // implements Message ----------------------------------------------

  inline Device_mode4* New() const PROTOBUF_FINAL { return New(NULL); }

  Device_mode4* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Device_mode4& from);
  void MergeFrom(const Device_mode4& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Device_mode4* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool ActivationState = 1;
  void clear_activationstate();
  static const int kActivationStateFieldNumber = 1;
  bool activationstate() const;
  void set_activationstate(bool value);

  // @@protoc_insertion_point(class_scope:EvLog.Device.mode4)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  bool activationstate_;
  mutable int _cached_size_;
  friend struct  protobuf_EventLog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Device : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:EvLog.Device) */ {
 public:
  Device();
  virtual ~Device();

  Device(const Device& from);

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }

  static const Device& default_instance();

  static inline const Device* internal_default_instance() {
    return reinterpret_cast<const Device*>(
               &_Device_default_instance_);
  }

  void Swap(Device* other);

  // implements Message ----------------------------------------------

  inline Device* New() const PROTOBUF_FINAL { return New(NULL); }

  Device* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Device& from);
  void MergeFrom(const Device& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Device* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Device_mode1 mode1;
  typedef Device_mode2 mode2;
  typedef Device_mode3 mode3;
  typedef Device_mode4 mode4;

  // accessors -------------------------------------------------------

  // .EvLog.Device.mode1 pmode1 = 7;
  bool has_pmode1() const;
  void clear_pmode1();
  static const int kPmode1FieldNumber = 7;
  const ::EvLog::Device_mode1& pmode1() const;
  ::EvLog::Device_mode1* mutable_pmode1();
  ::EvLog::Device_mode1* release_pmode1();
  void set_allocated_pmode1(::EvLog::Device_mode1* pmode1);

  // .EvLog.Device.mode2 pmode2 = 8;
  bool has_pmode2() const;
  void clear_pmode2();
  static const int kPmode2FieldNumber = 8;
  const ::EvLog::Device_mode2& pmode2() const;
  ::EvLog::Device_mode2* mutable_pmode2();
  ::EvLog::Device_mode2* release_pmode2();
  void set_allocated_pmode2(::EvLog::Device_mode2* pmode2);

  // .EvLog.Device.mode3 pmode3 = 9;
  bool has_pmode3() const;
  void clear_pmode3();
  static const int kPmode3FieldNumber = 9;
  const ::EvLog::Device_mode3& pmode3() const;
  ::EvLog::Device_mode3* mutable_pmode3();
  ::EvLog::Device_mode3* release_pmode3();
  void set_allocated_pmode3(::EvLog::Device_mode3* pmode3);

  // .EvLog.Device.mode4 pmode4 = 10;
  bool has_pmode4() const;
  void clear_pmode4();
  static const int kPmode4FieldNumber = 10;
  const ::EvLog::Device_mode4& pmode4() const;
  ::EvLog::Device_mode4* mutable_pmode4();
  ::EvLog::Device_mode4* release_pmode4();
  void set_allocated_pmode4(::EvLog::Device_mode4* pmode4);

  // uint32 unique_id = 1;
  void clear_unique_id();
  static const int kUniqueIdFieldNumber = 1;
  ::google::protobuf::uint32 unique_id() const;
  void set_unique_id(::google::protobuf::uint32 value);

  // sint32 signal_lvl = 3;
  void clear_signal_lvl();
  static const int kSignalLvlFieldNumber = 3;
  ::google::protobuf::int32 signal_lvl() const;
  void set_signal_lvl(::google::protobuf::int32 value);

  // double battery_lvl = 5;
  void clear_battery_lvl();
  static const int kBatteryLvlFieldNumber = 5;
  double battery_lvl() const;
  void set_battery_lvl(double value);

  // uint32 signal_quality = 4;
  void clear_signal_quality();
  static const int kSignalQualityFieldNumber = 4;
  ::google::protobuf::uint32 signal_quality() const;
  void set_signal_quality(::google::protobuf::uint32 value);

  // uint32 work_mode = 6;
  void clear_work_mode();
  static const int kWorkModeFieldNumber = 6;
  ::google::protobuf::uint32 work_mode() const;
  void set_work_mode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:EvLog.Device)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::EvLog::Device_mode1* pmode1_;
  ::EvLog::Device_mode2* pmode2_;
  ::EvLog::Device_mode3* pmode3_;
  ::EvLog::Device_mode4* pmode4_;
  ::google::protobuf::uint32 unique_id_;
  ::google::protobuf::int32 signal_lvl_;
  double battery_lvl_;
  ::google::protobuf::uint32 signal_quality_;
  ::google::protobuf::uint32 work_mode_;
  mutable int _cached_size_;
  friend struct  protobuf_EventLog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TD : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:EvLog.TD) */ {
 public:
  TD();
  virtual ~TD();

  TD(const TD& from);

  inline TD& operator=(const TD& from) {
    CopyFrom(from);
    return *this;
  }

  static const TD& default_instance();

  static inline const TD* internal_default_instance() {
    return reinterpret_cast<const TD*>(
               &_TD_default_instance_);
  }

  void Swap(TD* other);

  // implements Message ----------------------------------------------

  inline TD* New() const PROTOBUF_FINAL { return New(NULL); }

  TD* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const TD& from);
  void MergeFrom(const TD& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TD* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 Year = 1;
  void clear_year();
  static const int kYearFieldNumber = 1;
  ::google::protobuf::uint32 year() const;
  void set_year(::google::protobuf::uint32 value);

  // uint32 Month = 2;
  void clear_month();
  static const int kMonthFieldNumber = 2;
  ::google::protobuf::uint32 month() const;
  void set_month(::google::protobuf::uint32 value);

  // uint32 Day = 3;
  void clear_day();
  static const int kDayFieldNumber = 3;
  ::google::protobuf::uint32 day() const;
  void set_day(::google::protobuf::uint32 value);

  // uint32 Hour = 4;
  void clear_hour();
  static const int kHourFieldNumber = 4;
  ::google::protobuf::uint32 hour() const;
  void set_hour(::google::protobuf::uint32 value);

  // uint32 Minute = 5;
  void clear_minute();
  static const int kMinuteFieldNumber = 5;
  ::google::protobuf::uint32 minute() const;
  void set_minute(::google::protobuf::uint32 value);

  // uint32 Second = 6;
  void clear_second();
  static const int kSecondFieldNumber = 6;
  ::google::protobuf::uint32 second() const;
  void set_second(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:EvLog.TD)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::uint32 year_;
  ::google::protobuf::uint32 month_;
  ::google::protobuf::uint32 day_;
  ::google::protobuf::uint32 hour_;
  ::google::protobuf::uint32 minute_;
  ::google::protobuf::uint32 second_;
  mutable int _cached_size_;
  friend struct  protobuf_EventLog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Event : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:EvLog.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }

  static const Event& default_instance();

  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }

  void Swap(Event* other);

  // implements Message ----------------------------------------------

  inline Event* New() const PROTOBUF_FINAL { return New(NULL); }

  Event* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .EvLog.Device dev = 1;
  bool has_dev() const;
  void clear_dev();
  static const int kDevFieldNumber = 1;
  const ::EvLog::Device& dev() const;
  ::EvLog::Device* mutable_dev();
  ::EvLog::Device* release_dev();
  void set_allocated_dev(::EvLog::Device* dev);

  // .EvLog.TD td = 3;
  bool has_td() const;
  void clear_td();
  static const int kTdFieldNumber = 3;
  const ::EvLog::TD& td() const;
  ::EvLog::TD* mutable_td();
  ::EvLog::TD* release_td();
  void set_allocated_td(::EvLog::TD* td);

  // uint32 eCode = 2;
  void clear_ecode();
  static const int kECodeFieldNumber = 2;
  ::google::protobuf::uint32 ecode() const;
  void set_ecode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:EvLog.Event)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::EvLog::Device* dev_;
  ::EvLog::TD* td_;
  ::google::protobuf::uint32 ecode_;
  mutable int _cached_size_;
  friend struct  protobuf_EventLog_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EventLog : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:EvLog.EventLog) */ {
 public:
  EventLog();
  virtual ~EventLog();

  EventLog(const EventLog& from);

  inline EventLog& operator=(const EventLog& from) {
    CopyFrom(from);
    return *this;
  }

  static const EventLog& default_instance();

  static inline const EventLog* internal_default_instance() {
    return reinterpret_cast<const EventLog*>(
               &_EventLog_default_instance_);
  }

  void Swap(EventLog* other);

  // implements Message ----------------------------------------------

  inline EventLog* New() const PROTOBUF_FINAL { return New(NULL); }

  EventLog* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const EventLog& from);
  void MergeFrom(const EventLog& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EventLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .EvLog.Event Events = 1;
  int events_size() const;
  void clear_events();
  static const int kEventsFieldNumber = 1;
  const ::EvLog::Event& events(int index) const;
  ::EvLog::Event* mutable_events(int index);
  ::EvLog::Event* add_events();
  ::google::protobuf::RepeatedPtrField< ::EvLog::Event >*
      mutable_events();
  const ::google::protobuf::RepeatedPtrField< ::EvLog::Event >&
      events() const;

  // @@protoc_insertion_point(class_scope:EvLog.EventLog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::EvLog::Event > events_;
  mutable int _cached_size_;
  friend struct  protobuf_EventLog_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Device_mode1

// double lat = 1;
inline void Device_mode1::clear_lat() {
  lat_ = 0;
}
inline double Device_mode1::lat() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode1.lat)
  return lat_;
}
inline void Device_mode1::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode1.lat)
}

// double lon = 2;
inline void Device_mode1::clear_lon() {
  lon_ = 0;
}
inline double Device_mode1::lon() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode1.lon)
  return lon_;
}
inline void Device_mode1::set_lon(double value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode1.lon)
}

// int32 r = 3;
inline void Device_mode1::clear_r() {
  r_ = 0;
}
inline ::google::protobuf::int32 Device_mode1::r() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode1.r)
  return r_;
}
inline void Device_mode1::set_r(::google::protobuf::int32 value) {
  
  r_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode1.r)
}

// uint32 Year = 4;
inline void Device_mode1::clear_year() {
  year_ = 0u;
}
inline ::google::protobuf::uint32 Device_mode1::year() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode1.Year)
  return year_;
}
inline void Device_mode1::set_year(::google::protobuf::uint32 value) {
  
  year_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode1.Year)
}

// uint32 Month = 5;
inline void Device_mode1::clear_month() {
  month_ = 0u;
}
inline ::google::protobuf::uint32 Device_mode1::month() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode1.Month)
  return month_;
}
inline void Device_mode1::set_month(::google::protobuf::uint32 value) {
  
  month_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode1.Month)
}

// uint32 Day = 6;
inline void Device_mode1::clear_day() {
  day_ = 0u;
}
inline ::google::protobuf::uint32 Device_mode1::day() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode1.Day)
  return day_;
}
inline void Device_mode1::set_day(::google::protobuf::uint32 value) {
  
  day_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode1.Day)
}

// uint32 Hour = 7;
inline void Device_mode1::clear_hour() {
  hour_ = 0u;
}
inline ::google::protobuf::uint32 Device_mode1::hour() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode1.Hour)
  return hour_;
}
inline void Device_mode1::set_hour(::google::protobuf::uint32 value) {
  
  hour_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode1.Hour)
}

// uint32 Minute = 8;
inline void Device_mode1::clear_minute() {
  minute_ = 0u;
}
inline ::google::protobuf::uint32 Device_mode1::minute() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode1.Minute)
  return minute_;
}
inline void Device_mode1::set_minute(::google::protobuf::uint32 value) {
  
  minute_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode1.Minute)
}

// uint32 Second = 9;
inline void Device_mode1::clear_second() {
  second_ = 0u;
}
inline ::google::protobuf::uint32 Device_mode1::second() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode1.Second)
  return second_;
}
inline void Device_mode1::set_second(::google::protobuf::uint32 value) {
  
  second_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode1.Second)
}

// -------------------------------------------------------------------

// Device_mode2

// uint32 channel = 1;
inline void Device_mode2::clear_channel() {
  channel_ = 0u;
}
inline ::google::protobuf::uint32 Device_mode2::channel() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode2.channel)
  return channel_;
}
inline void Device_mode2::set_channel(::google::protobuf::uint32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode2.channel)
}

// uint32 tPulse = 2;
inline void Device_mode2::clear_tpulse() {
  tpulse_ = 0u;
}
inline ::google::protobuf::uint32 Device_mode2::tpulse() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode2.tPulse)
  return tpulse_;
}
inline void Device_mode2::set_tpulse(::google::protobuf::uint32 value) {
  
  tpulse_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode2.tPulse)
}

// uint32 tWait = 3;
inline void Device_mode2::clear_twait() {
  twait_ = 0u;
}
inline ::google::protobuf::uint32 Device_mode2::twait() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode2.tWait)
  return twait_;
}
inline void Device_mode2::set_twait(::google::protobuf::uint32 value) {
  
  twait_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode2.tWait)
}

// uint32 nPulse = 4;
inline void Device_mode2::clear_npulse() {
  npulse_ = 0u;
}
inline ::google::protobuf::uint32 Device_mode2::npulse() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode2.nPulse)
  return npulse_;
}
inline void Device_mode2::set_npulse(::google::protobuf::uint32 value) {
  
  npulse_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode2.nPulse)
}

// -------------------------------------------------------------------

// Device_mode3_inSleep

// uint32 Year = 1;
inline void Device_mode3_inSleep::clear_year() {
  year_ = 0u;
}
inline ::google::protobuf::uint32 Device_mode3_inSleep::year() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode3.inSleep.Year)
  return year_;
}
inline void Device_mode3_inSleep::set_year(::google::protobuf::uint32 value) {
  
  year_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode3.inSleep.Year)
}

// uint32 Month = 2;
inline void Device_mode3_inSleep::clear_month() {
  month_ = 0u;
}
inline ::google::protobuf::uint32 Device_mode3_inSleep::month() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode3.inSleep.Month)
  return month_;
}
inline void Device_mode3_inSleep::set_month(::google::protobuf::uint32 value) {
  
  month_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode3.inSleep.Month)
}

// uint32 Day = 3;
inline void Device_mode3_inSleep::clear_day() {
  day_ = 0u;
}
inline ::google::protobuf::uint32 Device_mode3_inSleep::day() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode3.inSleep.Day)
  return day_;
}
inline void Device_mode3_inSleep::set_day(::google::protobuf::uint32 value) {
  
  day_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode3.inSleep.Day)
}

// uint32 Hour = 4;
inline void Device_mode3_inSleep::clear_hour() {
  hour_ = 0u;
}
inline ::google::protobuf::uint32 Device_mode3_inSleep::hour() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode3.inSleep.Hour)
  return hour_;
}
inline void Device_mode3_inSleep::set_hour(::google::protobuf::uint32 value) {
  
  hour_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode3.inSleep.Hour)
}

// uint32 Minute = 5;
inline void Device_mode3_inSleep::clear_minute() {
  minute_ = 0u;
}
inline ::google::protobuf::uint32 Device_mode3_inSleep::minute() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode3.inSleep.Minute)
  return minute_;
}
inline void Device_mode3_inSleep::set_minute(::google::protobuf::uint32 value) {
  
  minute_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode3.inSleep.Minute)
}

// uint32 Second = 6;
inline void Device_mode3_inSleep::clear_second() {
  second_ = 0u;
}
inline ::google::protobuf::uint32 Device_mode3_inSleep::second() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode3.inSleep.Second)
  return second_;
}
inline void Device_mode3_inSleep::set_second(::google::protobuf::uint32 value) {
  
  second_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode3.inSleep.Second)
}

// -------------------------------------------------------------------

// Device_mode3_outSleep

// uint32 Year = 1;
inline void Device_mode3_outSleep::clear_year() {
  year_ = 0u;
}
inline ::google::protobuf::uint32 Device_mode3_outSleep::year() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode3.outSleep.Year)
  return year_;
}
inline void Device_mode3_outSleep::set_year(::google::protobuf::uint32 value) {
  
  year_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode3.outSleep.Year)
}

// uint32 Month = 2;
inline void Device_mode3_outSleep::clear_month() {
  month_ = 0u;
}
inline ::google::protobuf::uint32 Device_mode3_outSleep::month() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode3.outSleep.Month)
  return month_;
}
inline void Device_mode3_outSleep::set_month(::google::protobuf::uint32 value) {
  
  month_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode3.outSleep.Month)
}

// uint32 Day = 3;
inline void Device_mode3_outSleep::clear_day() {
  day_ = 0u;
}
inline ::google::protobuf::uint32 Device_mode3_outSleep::day() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode3.outSleep.Day)
  return day_;
}
inline void Device_mode3_outSleep::set_day(::google::protobuf::uint32 value) {
  
  day_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode3.outSleep.Day)
}

// uint32 Hour = 4;
inline void Device_mode3_outSleep::clear_hour() {
  hour_ = 0u;
}
inline ::google::protobuf::uint32 Device_mode3_outSleep::hour() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode3.outSleep.Hour)
  return hour_;
}
inline void Device_mode3_outSleep::set_hour(::google::protobuf::uint32 value) {
  
  hour_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode3.outSleep.Hour)
}

// uint32 Minute = 5;
inline void Device_mode3_outSleep::clear_minute() {
  minute_ = 0u;
}
inline ::google::protobuf::uint32 Device_mode3_outSleep::minute() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode3.outSleep.Minute)
  return minute_;
}
inline void Device_mode3_outSleep::set_minute(::google::protobuf::uint32 value) {
  
  minute_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode3.outSleep.Minute)
}

// uint32 Second = 6;
inline void Device_mode3_outSleep::clear_second() {
  second_ = 0u;
}
inline ::google::protobuf::uint32 Device_mode3_outSleep::second() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode3.outSleep.Second)
  return second_;
}
inline void Device_mode3_outSleep::set_second(::google::protobuf::uint32 value) {
  
  second_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode3.outSleep.Second)
}

// -------------------------------------------------------------------

// Device_mode3

// uint32 ModeOut = 1;
inline void Device_mode3::clear_modeout() {
  modeout_ = 0u;
}
inline ::google::protobuf::uint32 Device_mode3::modeout() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode3.ModeOut)
  return modeout_;
}
inline void Device_mode3::set_modeout(::google::protobuf::uint32 value) {
  
  modeout_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode3.ModeOut)
}

// .EvLog.Device.mode3.inSleep inslp = 2;
inline bool Device_mode3::has_inslp() const {
  return this != internal_default_instance() && inslp_ != NULL;
}
inline void Device_mode3::clear_inslp() {
  if (GetArenaNoVirtual() == NULL && inslp_ != NULL) delete inslp_;
  inslp_ = NULL;
}
inline const ::EvLog::Device_mode3_inSleep& Device_mode3::inslp() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode3.inslp)
  return inslp_ != NULL ? *inslp_
                         : *::EvLog::Device_mode3_inSleep::internal_default_instance();
}
inline ::EvLog::Device_mode3_inSleep* Device_mode3::mutable_inslp() {
  
  if (inslp_ == NULL) {
    inslp_ = new ::EvLog::Device_mode3_inSleep;
  }
  // @@protoc_insertion_point(field_mutable:EvLog.Device.mode3.inslp)
  return inslp_;
}
inline ::EvLog::Device_mode3_inSleep* Device_mode3::release_inslp() {
  // @@protoc_insertion_point(field_release:EvLog.Device.mode3.inslp)
  
  ::EvLog::Device_mode3_inSleep* temp = inslp_;
  inslp_ = NULL;
  return temp;
}
inline void Device_mode3::set_allocated_inslp(::EvLog::Device_mode3_inSleep* inslp) {
  delete inslp_;
  inslp_ = inslp;
  if (inslp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:EvLog.Device.mode3.inslp)
}

// .EvLog.Device.mode3.outSleep outslp = 3;
inline bool Device_mode3::has_outslp() const {
  return this != internal_default_instance() && outslp_ != NULL;
}
inline void Device_mode3::clear_outslp() {
  if (GetArenaNoVirtual() == NULL && outslp_ != NULL) delete outslp_;
  outslp_ = NULL;
}
inline const ::EvLog::Device_mode3_outSleep& Device_mode3::outslp() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode3.outslp)
  return outslp_ != NULL ? *outslp_
                         : *::EvLog::Device_mode3_outSleep::internal_default_instance();
}
inline ::EvLog::Device_mode3_outSleep* Device_mode3::mutable_outslp() {
  
  if (outslp_ == NULL) {
    outslp_ = new ::EvLog::Device_mode3_outSleep;
  }
  // @@protoc_insertion_point(field_mutable:EvLog.Device.mode3.outslp)
  return outslp_;
}
inline ::EvLog::Device_mode3_outSleep* Device_mode3::release_outslp() {
  // @@protoc_insertion_point(field_release:EvLog.Device.mode3.outslp)
  
  ::EvLog::Device_mode3_outSleep* temp = outslp_;
  outslp_ = NULL;
  return temp;
}
inline void Device_mode3::set_allocated_outslp(::EvLog::Device_mode3_outSleep* outslp) {
  delete outslp_;
  outslp_ = outslp;
  if (outslp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:EvLog.Device.mode3.outslp)
}

// -------------------------------------------------------------------

// Device_mode4

// bool ActivationState = 1;
inline void Device_mode4::clear_activationstate() {
  activationstate_ = false;
}
inline bool Device_mode4::activationstate() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode4.ActivationState)
  return activationstate_;
}
inline void Device_mode4::set_activationstate(bool value) {
  
  activationstate_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode4.ActivationState)
}

// -------------------------------------------------------------------

// Device

// uint32 unique_id = 1;
inline void Device::clear_unique_id() {
  unique_id_ = 0u;
}
inline ::google::protobuf::uint32 Device::unique_id() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.unique_id)
  return unique_id_;
}
inline void Device::set_unique_id(::google::protobuf::uint32 value) {
  
  unique_id_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.unique_id)
}

// sint32 signal_lvl = 3;
inline void Device::clear_signal_lvl() {
  signal_lvl_ = 0;
}
inline ::google::protobuf::int32 Device::signal_lvl() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.signal_lvl)
  return signal_lvl_;
}
inline void Device::set_signal_lvl(::google::protobuf::int32 value) {
  
  signal_lvl_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.signal_lvl)
}

// uint32 signal_quality = 4;
inline void Device::clear_signal_quality() {
  signal_quality_ = 0u;
}
inline ::google::protobuf::uint32 Device::signal_quality() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.signal_quality)
  return signal_quality_;
}
inline void Device::set_signal_quality(::google::protobuf::uint32 value) {
  
  signal_quality_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.signal_quality)
}

// double battery_lvl = 5;
inline void Device::clear_battery_lvl() {
  battery_lvl_ = 0;
}
inline double Device::battery_lvl() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.battery_lvl)
  return battery_lvl_;
}
inline void Device::set_battery_lvl(double value) {
  
  battery_lvl_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.battery_lvl)
}

// uint32 work_mode = 6;
inline void Device::clear_work_mode() {
  work_mode_ = 0u;
}
inline ::google::protobuf::uint32 Device::work_mode() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.work_mode)
  return work_mode_;
}
inline void Device::set_work_mode(::google::protobuf::uint32 value) {
  
  work_mode_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.work_mode)
}

// .EvLog.Device.mode1 pmode1 = 7;
inline bool Device::has_pmode1() const {
  return this != internal_default_instance() && pmode1_ != NULL;
}
inline void Device::clear_pmode1() {
  if (GetArenaNoVirtual() == NULL && pmode1_ != NULL) delete pmode1_;
  pmode1_ = NULL;
}
inline const ::EvLog::Device_mode1& Device::pmode1() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.pmode1)
  return pmode1_ != NULL ? *pmode1_
                         : *::EvLog::Device_mode1::internal_default_instance();
}
inline ::EvLog::Device_mode1* Device::mutable_pmode1() {
  
  if (pmode1_ == NULL) {
    pmode1_ = new ::EvLog::Device_mode1;
  }
  // @@protoc_insertion_point(field_mutable:EvLog.Device.pmode1)
  return pmode1_;
}
inline ::EvLog::Device_mode1* Device::release_pmode1() {
  // @@protoc_insertion_point(field_release:EvLog.Device.pmode1)
  
  ::EvLog::Device_mode1* temp = pmode1_;
  pmode1_ = NULL;
  return temp;
}
inline void Device::set_allocated_pmode1(::EvLog::Device_mode1* pmode1) {
  delete pmode1_;
  pmode1_ = pmode1;
  if (pmode1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:EvLog.Device.pmode1)
}

// .EvLog.Device.mode2 pmode2 = 8;
inline bool Device::has_pmode2() const {
  return this != internal_default_instance() && pmode2_ != NULL;
}
inline void Device::clear_pmode2() {
  if (GetArenaNoVirtual() == NULL && pmode2_ != NULL) delete pmode2_;
  pmode2_ = NULL;
}
inline const ::EvLog::Device_mode2& Device::pmode2() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.pmode2)
  return pmode2_ != NULL ? *pmode2_
                         : *::EvLog::Device_mode2::internal_default_instance();
}
inline ::EvLog::Device_mode2* Device::mutable_pmode2() {
  
  if (pmode2_ == NULL) {
    pmode2_ = new ::EvLog::Device_mode2;
  }
  // @@protoc_insertion_point(field_mutable:EvLog.Device.pmode2)
  return pmode2_;
}
inline ::EvLog::Device_mode2* Device::release_pmode2() {
  // @@protoc_insertion_point(field_release:EvLog.Device.pmode2)
  
  ::EvLog::Device_mode2* temp = pmode2_;
  pmode2_ = NULL;
  return temp;
}
inline void Device::set_allocated_pmode2(::EvLog::Device_mode2* pmode2) {
  delete pmode2_;
  pmode2_ = pmode2;
  if (pmode2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:EvLog.Device.pmode2)
}

// .EvLog.Device.mode3 pmode3 = 9;
inline bool Device::has_pmode3() const {
  return this != internal_default_instance() && pmode3_ != NULL;
}
inline void Device::clear_pmode3() {
  if (GetArenaNoVirtual() == NULL && pmode3_ != NULL) delete pmode3_;
  pmode3_ = NULL;
}
inline const ::EvLog::Device_mode3& Device::pmode3() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.pmode3)
  return pmode3_ != NULL ? *pmode3_
                         : *::EvLog::Device_mode3::internal_default_instance();
}
inline ::EvLog::Device_mode3* Device::mutable_pmode3() {
  
  if (pmode3_ == NULL) {
    pmode3_ = new ::EvLog::Device_mode3;
  }
  // @@protoc_insertion_point(field_mutable:EvLog.Device.pmode3)
  return pmode3_;
}
inline ::EvLog::Device_mode3* Device::release_pmode3() {
  // @@protoc_insertion_point(field_release:EvLog.Device.pmode3)
  
  ::EvLog::Device_mode3* temp = pmode3_;
  pmode3_ = NULL;
  return temp;
}
inline void Device::set_allocated_pmode3(::EvLog::Device_mode3* pmode3) {
  delete pmode3_;
  pmode3_ = pmode3;
  if (pmode3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:EvLog.Device.pmode3)
}

// .EvLog.Device.mode4 pmode4 = 10;
inline bool Device::has_pmode4() const {
  return this != internal_default_instance() && pmode4_ != NULL;
}
inline void Device::clear_pmode4() {
  if (GetArenaNoVirtual() == NULL && pmode4_ != NULL) delete pmode4_;
  pmode4_ = NULL;
}
inline const ::EvLog::Device_mode4& Device::pmode4() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.pmode4)
  return pmode4_ != NULL ? *pmode4_
                         : *::EvLog::Device_mode4::internal_default_instance();
}
inline ::EvLog::Device_mode4* Device::mutable_pmode4() {
  
  if (pmode4_ == NULL) {
    pmode4_ = new ::EvLog::Device_mode4;
  }
  // @@protoc_insertion_point(field_mutable:EvLog.Device.pmode4)
  return pmode4_;
}
inline ::EvLog::Device_mode4* Device::release_pmode4() {
  // @@protoc_insertion_point(field_release:EvLog.Device.pmode4)
  
  ::EvLog::Device_mode4* temp = pmode4_;
  pmode4_ = NULL;
  return temp;
}
inline void Device::set_allocated_pmode4(::EvLog::Device_mode4* pmode4) {
  delete pmode4_;
  pmode4_ = pmode4;
  if (pmode4) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:EvLog.Device.pmode4)
}

// -------------------------------------------------------------------

// TD

// uint32 Year = 1;
inline void TD::clear_year() {
  year_ = 0u;
}
inline ::google::protobuf::uint32 TD::year() const {
  // @@protoc_insertion_point(field_get:EvLog.TD.Year)
  return year_;
}
inline void TD::set_year(::google::protobuf::uint32 value) {
  
  year_ = value;
  // @@protoc_insertion_point(field_set:EvLog.TD.Year)
}

// uint32 Month = 2;
inline void TD::clear_month() {
  month_ = 0u;
}
inline ::google::protobuf::uint32 TD::month() const {
  // @@protoc_insertion_point(field_get:EvLog.TD.Month)
  return month_;
}
inline void TD::set_month(::google::protobuf::uint32 value) {
  
  month_ = value;
  // @@protoc_insertion_point(field_set:EvLog.TD.Month)
}

// uint32 Day = 3;
inline void TD::clear_day() {
  day_ = 0u;
}
inline ::google::protobuf::uint32 TD::day() const {
  // @@protoc_insertion_point(field_get:EvLog.TD.Day)
  return day_;
}
inline void TD::set_day(::google::protobuf::uint32 value) {
  
  day_ = value;
  // @@protoc_insertion_point(field_set:EvLog.TD.Day)
}

// uint32 Hour = 4;
inline void TD::clear_hour() {
  hour_ = 0u;
}
inline ::google::protobuf::uint32 TD::hour() const {
  // @@protoc_insertion_point(field_get:EvLog.TD.Hour)
  return hour_;
}
inline void TD::set_hour(::google::protobuf::uint32 value) {
  
  hour_ = value;
  // @@protoc_insertion_point(field_set:EvLog.TD.Hour)
}

// uint32 Minute = 5;
inline void TD::clear_minute() {
  minute_ = 0u;
}
inline ::google::protobuf::uint32 TD::minute() const {
  // @@protoc_insertion_point(field_get:EvLog.TD.Minute)
  return minute_;
}
inline void TD::set_minute(::google::protobuf::uint32 value) {
  
  minute_ = value;
  // @@protoc_insertion_point(field_set:EvLog.TD.Minute)
}

// uint32 Second = 6;
inline void TD::clear_second() {
  second_ = 0u;
}
inline ::google::protobuf::uint32 TD::second() const {
  // @@protoc_insertion_point(field_get:EvLog.TD.Second)
  return second_;
}
inline void TD::set_second(::google::protobuf::uint32 value) {
  
  second_ = value;
  // @@protoc_insertion_point(field_set:EvLog.TD.Second)
}

// -------------------------------------------------------------------

// Event

// .EvLog.Device dev = 1;
inline bool Event::has_dev() const {
  return this != internal_default_instance() && dev_ != NULL;
}
inline void Event::clear_dev() {
  if (GetArenaNoVirtual() == NULL && dev_ != NULL) delete dev_;
  dev_ = NULL;
}
inline const ::EvLog::Device& Event::dev() const {
  // @@protoc_insertion_point(field_get:EvLog.Event.dev)
  return dev_ != NULL ? *dev_
                         : *::EvLog::Device::internal_default_instance();
}
inline ::EvLog::Device* Event::mutable_dev() {
  
  if (dev_ == NULL) {
    dev_ = new ::EvLog::Device;
  }
  // @@protoc_insertion_point(field_mutable:EvLog.Event.dev)
  return dev_;
}
inline ::EvLog::Device* Event::release_dev() {
  // @@protoc_insertion_point(field_release:EvLog.Event.dev)
  
  ::EvLog::Device* temp = dev_;
  dev_ = NULL;
  return temp;
}
inline void Event::set_allocated_dev(::EvLog::Device* dev) {
  delete dev_;
  dev_ = dev;
  if (dev) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:EvLog.Event.dev)
}

// uint32 eCode = 2;
inline void Event::clear_ecode() {
  ecode_ = 0u;
}
inline ::google::protobuf::uint32 Event::ecode() const {
  // @@protoc_insertion_point(field_get:EvLog.Event.eCode)
  return ecode_;
}
inline void Event::set_ecode(::google::protobuf::uint32 value) {
  
  ecode_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Event.eCode)
}

// .EvLog.TD td = 3;
inline bool Event::has_td() const {
  return this != internal_default_instance() && td_ != NULL;
}
inline void Event::clear_td() {
  if (GetArenaNoVirtual() == NULL && td_ != NULL) delete td_;
  td_ = NULL;
}
inline const ::EvLog::TD& Event::td() const {
  // @@protoc_insertion_point(field_get:EvLog.Event.td)
  return td_ != NULL ? *td_
                         : *::EvLog::TD::internal_default_instance();
}
inline ::EvLog::TD* Event::mutable_td() {
  
  if (td_ == NULL) {
    td_ = new ::EvLog::TD;
  }
  // @@protoc_insertion_point(field_mutable:EvLog.Event.td)
  return td_;
}
inline ::EvLog::TD* Event::release_td() {
  // @@protoc_insertion_point(field_release:EvLog.Event.td)
  
  ::EvLog::TD* temp = td_;
  td_ = NULL;
  return temp;
}
inline void Event::set_allocated_td(::EvLog::TD* td) {
  delete td_;
  td_ = td;
  if (td) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:EvLog.Event.td)
}

// -------------------------------------------------------------------

// EventLog

// repeated .EvLog.Event Events = 1;
inline int EventLog::events_size() const {
  return events_.size();
}
inline void EventLog::clear_events() {
  events_.Clear();
}
inline const ::EvLog::Event& EventLog::events(int index) const {
  // @@protoc_insertion_point(field_get:EvLog.EventLog.Events)
  return events_.Get(index);
}
inline ::EvLog::Event* EventLog::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:EvLog.EventLog.Events)
  return events_.Mutable(index);
}
inline ::EvLog::Event* EventLog::add_events() {
  // @@protoc_insertion_point(field_add:EvLog.EventLog.Events)
  return events_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::EvLog::Event >*
EventLog::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:EvLog.EventLog.Events)
  return &events_;
}
inline const ::google::protobuf::RepeatedPtrField< ::EvLog::Event >&
EventLog::events() const {
  // @@protoc_insertion_point(field_list:EvLog.EventLog.Events)
  return events_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace EvLog

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_EventLog_2eproto__INCLUDED
