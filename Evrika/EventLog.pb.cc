// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EventLog.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EventLog.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace EvLog {
class Device_mode1DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Device_mode1> {
} _Device_mode1_default_instance_;
class Device_mode2DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Device_mode2> {
} _Device_mode2_default_instance_;
class Device_mode3_inSleepDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Device_mode3_inSleep> {
} _Device_mode3_inSleep_default_instance_;
class Device_mode3_outSleepDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Device_mode3_outSleep> {
} _Device_mode3_outSleep_default_instance_;
class Device_mode3DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Device_mode3> {
} _Device_mode3_default_instance_;
class Device_mode4DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Device_mode4> {
} _Device_mode4_default_instance_;
class DeviceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Device> {
} _Device_default_instance_;
class TDDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TD> {
} _TD_default_instance_;
class EventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Event> {
} _Event_default_instance_;
class EventLogDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EventLog> {
} _EventLog_default_instance_;

namespace protobuf_EventLog_2eproto {


void TableStruct::Shutdown() {
  _Device_mode1_default_instance_.Shutdown();
  _Device_mode2_default_instance_.Shutdown();
  _Device_mode3_inSleep_default_instance_.Shutdown();
  _Device_mode3_outSleep_default_instance_.Shutdown();
  _Device_mode3_default_instance_.Shutdown();
  _Device_mode4_default_instance_.Shutdown();
  _Device_default_instance_.Shutdown();
  _TD_default_instance_.Shutdown();
  _Event_default_instance_.Shutdown();
  _EventLog_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Device_mode1_default_instance_.DefaultConstruct();
  _Device_mode2_default_instance_.DefaultConstruct();
  _Device_mode3_inSleep_default_instance_.DefaultConstruct();
  _Device_mode3_outSleep_default_instance_.DefaultConstruct();
  _Device_mode3_default_instance_.DefaultConstruct();
  _Device_mode4_default_instance_.DefaultConstruct();
  _Device_default_instance_.DefaultConstruct();
  _TD_default_instance_.DefaultConstruct();
  _Event_default_instance_.DefaultConstruct();
  _EventLog_default_instance_.DefaultConstruct();
  _Device_mode3_default_instance_.get_mutable()->inslp_ = const_cast< ::EvLog::Device_mode3_inSleep*>(
      ::EvLog::Device_mode3_inSleep::internal_default_instance());
  _Device_mode3_default_instance_.get_mutable()->outslp_ = const_cast< ::EvLog::Device_mode3_outSleep*>(
      ::EvLog::Device_mode3_outSleep::internal_default_instance());
  _Device_default_instance_.get_mutable()->pmode1_ = const_cast< ::EvLog::Device_mode1*>(
      ::EvLog::Device_mode1::internal_default_instance());
  _Device_default_instance_.get_mutable()->pmode2_ = const_cast< ::EvLog::Device_mode2*>(
      ::EvLog::Device_mode2::internal_default_instance());
  _Device_default_instance_.get_mutable()->pmode3_ = const_cast< ::EvLog::Device_mode3*>(
      ::EvLog::Device_mode3::internal_default_instance());
  _Device_default_instance_.get_mutable()->pmode4_ = const_cast< ::EvLog::Device_mode4*>(
      ::EvLog::Device_mode4::internal_default_instance());
  _Event_default_instance_.get_mutable()->dev_ = const_cast< ::EvLog::Device*>(
      ::EvLog::Device::internal_default_instance());
  _Event_default_instance_.get_mutable()->td_ = const_cast< ::EvLog::TD*>(
      ::EvLog::TD::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_EventLog_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Device_mode1::kLatFieldNumber;
const int Device_mode1::kLonFieldNumber;
const int Device_mode1::kRFieldNumber;
const int Device_mode1::kYearFieldNumber;
const int Device_mode1::kMonthFieldNumber;
const int Device_mode1::kDayFieldNumber;
const int Device_mode1::kHourFieldNumber;
const int Device_mode1::kMinuteFieldNumber;
const int Device_mode1::kSecondFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Device_mode1::Device_mode1()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_EventLog_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:EvLog.Device.mode1)
}
Device_mode1::Device_mode1(const Device_mode1& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lat_, &from.lat_,
    reinterpret_cast<char*>(&second_) -
    reinterpret_cast<char*>(&lat_) + sizeof(second_));
  // @@protoc_insertion_point(copy_constructor:EvLog.Device.mode1)
}

void Device_mode1::SharedCtor() {
  ::memset(&lat_, 0, reinterpret_cast<char*>(&second_) -
    reinterpret_cast<char*>(&lat_) + sizeof(second_));
  _cached_size_ = 0;
}

Device_mode1::~Device_mode1() {
  // @@protoc_insertion_point(destructor:EvLog.Device.mode1)
  SharedDtor();
}

void Device_mode1::SharedDtor() {
}

void Device_mode1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Device_mode1& Device_mode1::default_instance() {
  protobuf_EventLog_2eproto::InitDefaults();
  return *internal_default_instance();
}

Device_mode1* Device_mode1::New(::google::protobuf::Arena* arena) const {
  Device_mode1* n = new Device_mode1;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Device_mode1::Clear() {
// @@protoc_insertion_point(message_clear_start:EvLog.Device.mode1)
  ::memset(&lat_, 0, reinterpret_cast<char*>(&second_) -
    reinterpret_cast<char*>(&lat_) + sizeof(second_));
}

bool Device_mode1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EvLog.Device.mode1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double lat = 1;
      case 1: {
        if (tag == 9u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lon = 2;
      case 2: {
        if (tag == 17u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 r = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Year = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Month = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Day = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Hour = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hour_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Minute = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Second = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EvLog.Device.mode1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EvLog.Device.mode1)
  return false;
#undef DO_
}

void Device_mode1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EvLog.Device.mode1)
  // double lat = 1;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lat(), output);
  }

  // double lon = 2;
  if (this->lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lon(), output);
  }

  // int32 r = 3;
  if (this->r() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->r(), output);
  }

  // uint32 Year = 4;
  if (this->year() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->year(), output);
  }

  // uint32 Month = 5;
  if (this->month() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->month(), output);
  }

  // uint32 Day = 6;
  if (this->day() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->day(), output);
  }

  // uint32 Hour = 7;
  if (this->hour() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->hour(), output);
  }

  // uint32 Minute = 8;
  if (this->minute() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->minute(), output);
  }

  // uint32 Second = 9;
  if (this->second() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->second(), output);
  }

  // @@protoc_insertion_point(serialize_end:EvLog.Device.mode1)
}

size_t Device_mode1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EvLog.Device.mode1)
  size_t total_size = 0;

  // double lat = 1;
  if (this->lat() != 0) {
    total_size += 1 + 8;
  }

  // double lon = 2;
  if (this->lon() != 0) {
    total_size += 1 + 8;
  }

  // int32 r = 3;
  if (this->r() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->r());
  }

  // uint32 Year = 4;
  if (this->year() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->year());
  }

  // uint32 Month = 5;
  if (this->month() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->month());
  }

  // uint32 Day = 6;
  if (this->day() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->day());
  }

  // uint32 Hour = 7;
  if (this->hour() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hour());
  }

  // uint32 Minute = 8;
  if (this->minute() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minute());
  }

  // uint32 Second = 9;
  if (this->second() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->second());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Device_mode1::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Device_mode1*>(&from));
}

void Device_mode1::MergeFrom(const Device_mode1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EvLog.Device.mode1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.lon() != 0) {
    set_lon(from.lon());
  }
  if (from.r() != 0) {
    set_r(from.r());
  }
  if (from.year() != 0) {
    set_year(from.year());
  }
  if (from.month() != 0) {
    set_month(from.month());
  }
  if (from.day() != 0) {
    set_day(from.day());
  }
  if (from.hour() != 0) {
    set_hour(from.hour());
  }
  if (from.minute() != 0) {
    set_minute(from.minute());
  }
  if (from.second() != 0) {
    set_second(from.second());
  }
}

void Device_mode1::CopyFrom(const Device_mode1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EvLog.Device.mode1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device_mode1::IsInitialized() const {
  return true;
}

void Device_mode1::Swap(Device_mode1* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Device_mode1::InternalSwap(Device_mode1* other) {
  std::swap(lat_, other->lat_);
  std::swap(lon_, other->lon_);
  std::swap(r_, other->r_);
  std::swap(year_, other->year_);
  std::swap(month_, other->month_);
  std::swap(day_, other->day_);
  std::swap(hour_, other->hour_);
  std::swap(minute_, other->minute_);
  std::swap(second_, other->second_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Device_mode1::GetTypeName() const {
  return "EvLog.Device.mode1";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Device_mode1

// double lat = 1;
void Device_mode1::clear_lat() {
  lat_ = 0;
}
double Device_mode1::lat() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode1.lat)
  return lat_;
}
void Device_mode1::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode1.lat)
}

// double lon = 2;
void Device_mode1::clear_lon() {
  lon_ = 0;
}
double Device_mode1::lon() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode1.lon)
  return lon_;
}
void Device_mode1::set_lon(double value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode1.lon)
}

// int32 r = 3;
void Device_mode1::clear_r() {
  r_ = 0;
}
::google::protobuf::int32 Device_mode1::r() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode1.r)
  return r_;
}
void Device_mode1::set_r(::google::protobuf::int32 value) {
  
  r_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode1.r)
}

// uint32 Year = 4;
void Device_mode1::clear_year() {
  year_ = 0u;
}
::google::protobuf::uint32 Device_mode1::year() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode1.Year)
  return year_;
}
void Device_mode1::set_year(::google::protobuf::uint32 value) {
  
  year_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode1.Year)
}

// uint32 Month = 5;
void Device_mode1::clear_month() {
  month_ = 0u;
}
::google::protobuf::uint32 Device_mode1::month() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode1.Month)
  return month_;
}
void Device_mode1::set_month(::google::protobuf::uint32 value) {
  
  month_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode1.Month)
}

// uint32 Day = 6;
void Device_mode1::clear_day() {
  day_ = 0u;
}
::google::protobuf::uint32 Device_mode1::day() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode1.Day)
  return day_;
}
void Device_mode1::set_day(::google::protobuf::uint32 value) {
  
  day_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode1.Day)
}

// uint32 Hour = 7;
void Device_mode1::clear_hour() {
  hour_ = 0u;
}
::google::protobuf::uint32 Device_mode1::hour() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode1.Hour)
  return hour_;
}
void Device_mode1::set_hour(::google::protobuf::uint32 value) {
  
  hour_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode1.Hour)
}

// uint32 Minute = 8;
void Device_mode1::clear_minute() {
  minute_ = 0u;
}
::google::protobuf::uint32 Device_mode1::minute() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode1.Minute)
  return minute_;
}
void Device_mode1::set_minute(::google::protobuf::uint32 value) {
  
  minute_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode1.Minute)
}

// uint32 Second = 9;
void Device_mode1::clear_second() {
  second_ = 0u;
}
::google::protobuf::uint32 Device_mode1::second() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode1.Second)
  return second_;
}
void Device_mode1::set_second(::google::protobuf::uint32 value) {
  
  second_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode1.Second)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Device_mode2::kChannelFieldNumber;
const int Device_mode2::kTPulseFieldNumber;
const int Device_mode2::kTWaitFieldNumber;
const int Device_mode2::kNPulseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Device_mode2::Device_mode2()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_EventLog_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:EvLog.Device.mode2)
}
Device_mode2::Device_mode2(const Device_mode2& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&channel_, &from.channel_,
    reinterpret_cast<char*>(&npulse_) -
    reinterpret_cast<char*>(&channel_) + sizeof(npulse_));
  // @@protoc_insertion_point(copy_constructor:EvLog.Device.mode2)
}

void Device_mode2::SharedCtor() {
  ::memset(&channel_, 0, reinterpret_cast<char*>(&npulse_) -
    reinterpret_cast<char*>(&channel_) + sizeof(npulse_));
  _cached_size_ = 0;
}

Device_mode2::~Device_mode2() {
  // @@protoc_insertion_point(destructor:EvLog.Device.mode2)
  SharedDtor();
}

void Device_mode2::SharedDtor() {
}

void Device_mode2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Device_mode2& Device_mode2::default_instance() {
  protobuf_EventLog_2eproto::InitDefaults();
  return *internal_default_instance();
}

Device_mode2* Device_mode2::New(::google::protobuf::Arena* arena) const {
  Device_mode2* n = new Device_mode2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Device_mode2::Clear() {
// @@protoc_insertion_point(message_clear_start:EvLog.Device.mode2)
  ::memset(&channel_, 0, reinterpret_cast<char*>(&npulse_) -
    reinterpret_cast<char*>(&channel_) + sizeof(npulse_));
}

bool Device_mode2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EvLog.Device.mode2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 channel = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tPulse = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpulse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tWait = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &twait_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 nPulse = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npulse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EvLog.Device.mode2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EvLog.Device.mode2)
  return false;
#undef DO_
}

void Device_mode2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EvLog.Device.mode2)
  // uint32 channel = 1;
  if (this->channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel(), output);
  }

  // uint32 tPulse = 2;
  if (this->tpulse() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tpulse(), output);
  }

  // uint32 tWait = 3;
  if (this->twait() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->twait(), output);
  }

  // uint32 nPulse = 4;
  if (this->npulse() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->npulse(), output);
  }

  // @@protoc_insertion_point(serialize_end:EvLog.Device.mode2)
}

size_t Device_mode2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EvLog.Device.mode2)
  size_t total_size = 0;

  // uint32 channel = 1;
  if (this->channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel());
  }

  // uint32 tPulse = 2;
  if (this->tpulse() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tpulse());
  }

  // uint32 tWait = 3;
  if (this->twait() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->twait());
  }

  // uint32 nPulse = 4;
  if (this->npulse() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->npulse());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Device_mode2::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Device_mode2*>(&from));
}

void Device_mode2::MergeFrom(const Device_mode2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EvLog.Device.mode2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
  if (from.tpulse() != 0) {
    set_tpulse(from.tpulse());
  }
  if (from.twait() != 0) {
    set_twait(from.twait());
  }
  if (from.npulse() != 0) {
    set_npulse(from.npulse());
  }
}

void Device_mode2::CopyFrom(const Device_mode2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EvLog.Device.mode2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device_mode2::IsInitialized() const {
  return true;
}

void Device_mode2::Swap(Device_mode2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Device_mode2::InternalSwap(Device_mode2* other) {
  std::swap(channel_, other->channel_);
  std::swap(tpulse_, other->tpulse_);
  std::swap(twait_, other->twait_);
  std::swap(npulse_, other->npulse_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Device_mode2::GetTypeName() const {
  return "EvLog.Device.mode2";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Device_mode2

// uint32 channel = 1;
void Device_mode2::clear_channel() {
  channel_ = 0u;
}
::google::protobuf::uint32 Device_mode2::channel() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode2.channel)
  return channel_;
}
void Device_mode2::set_channel(::google::protobuf::uint32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode2.channel)
}

// uint32 tPulse = 2;
void Device_mode2::clear_tpulse() {
  tpulse_ = 0u;
}
::google::protobuf::uint32 Device_mode2::tpulse() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode2.tPulse)
  return tpulse_;
}
void Device_mode2::set_tpulse(::google::protobuf::uint32 value) {
  
  tpulse_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode2.tPulse)
}

// uint32 tWait = 3;
void Device_mode2::clear_twait() {
  twait_ = 0u;
}
::google::protobuf::uint32 Device_mode2::twait() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode2.tWait)
  return twait_;
}
void Device_mode2::set_twait(::google::protobuf::uint32 value) {
  
  twait_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode2.tWait)
}

// uint32 nPulse = 4;
void Device_mode2::clear_npulse() {
  npulse_ = 0u;
}
::google::protobuf::uint32 Device_mode2::npulse() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode2.nPulse)
  return npulse_;
}
void Device_mode2::set_npulse(::google::protobuf::uint32 value) {
  
  npulse_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode2.nPulse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Device_mode3_inSleep::kYearFieldNumber;
const int Device_mode3_inSleep::kMonthFieldNumber;
const int Device_mode3_inSleep::kDayFieldNumber;
const int Device_mode3_inSleep::kHourFieldNumber;
const int Device_mode3_inSleep::kMinuteFieldNumber;
const int Device_mode3_inSleep::kSecondFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Device_mode3_inSleep::Device_mode3_inSleep()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_EventLog_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:EvLog.Device.mode3.inSleep)
}
Device_mode3_inSleep::Device_mode3_inSleep(const Device_mode3_inSleep& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&year_, &from.year_,
    reinterpret_cast<char*>(&second_) -
    reinterpret_cast<char*>(&year_) + sizeof(second_));
  // @@protoc_insertion_point(copy_constructor:EvLog.Device.mode3.inSleep)
}

void Device_mode3_inSleep::SharedCtor() {
  ::memset(&year_, 0, reinterpret_cast<char*>(&second_) -
    reinterpret_cast<char*>(&year_) + sizeof(second_));
  _cached_size_ = 0;
}

Device_mode3_inSleep::~Device_mode3_inSleep() {
  // @@protoc_insertion_point(destructor:EvLog.Device.mode3.inSleep)
  SharedDtor();
}

void Device_mode3_inSleep::SharedDtor() {
}

void Device_mode3_inSleep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Device_mode3_inSleep& Device_mode3_inSleep::default_instance() {
  protobuf_EventLog_2eproto::InitDefaults();
  return *internal_default_instance();
}

Device_mode3_inSleep* Device_mode3_inSleep::New(::google::protobuf::Arena* arena) const {
  Device_mode3_inSleep* n = new Device_mode3_inSleep;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Device_mode3_inSleep::Clear() {
// @@protoc_insertion_point(message_clear_start:EvLog.Device.mode3.inSleep)
  ::memset(&year_, 0, reinterpret_cast<char*>(&second_) -
    reinterpret_cast<char*>(&year_) + sizeof(second_));
}

bool Device_mode3_inSleep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EvLog.Device.mode3.inSleep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 Year = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Month = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Day = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Hour = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hour_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Minute = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Second = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EvLog.Device.mode3.inSleep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EvLog.Device.mode3.inSleep)
  return false;
#undef DO_
}

void Device_mode3_inSleep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EvLog.Device.mode3.inSleep)
  // uint32 Year = 1;
  if (this->year() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->year(), output);
  }

  // uint32 Month = 2;
  if (this->month() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->month(), output);
  }

  // uint32 Day = 3;
  if (this->day() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->day(), output);
  }

  // uint32 Hour = 4;
  if (this->hour() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hour(), output);
  }

  // uint32 Minute = 5;
  if (this->minute() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->minute(), output);
  }

  // uint32 Second = 6;
  if (this->second() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->second(), output);
  }

  // @@protoc_insertion_point(serialize_end:EvLog.Device.mode3.inSleep)
}

size_t Device_mode3_inSleep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EvLog.Device.mode3.inSleep)
  size_t total_size = 0;

  // uint32 Year = 1;
  if (this->year() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->year());
  }

  // uint32 Month = 2;
  if (this->month() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->month());
  }

  // uint32 Day = 3;
  if (this->day() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->day());
  }

  // uint32 Hour = 4;
  if (this->hour() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hour());
  }

  // uint32 Minute = 5;
  if (this->minute() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minute());
  }

  // uint32 Second = 6;
  if (this->second() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->second());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Device_mode3_inSleep::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Device_mode3_inSleep*>(&from));
}

void Device_mode3_inSleep::MergeFrom(const Device_mode3_inSleep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EvLog.Device.mode3.inSleep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.year() != 0) {
    set_year(from.year());
  }
  if (from.month() != 0) {
    set_month(from.month());
  }
  if (from.day() != 0) {
    set_day(from.day());
  }
  if (from.hour() != 0) {
    set_hour(from.hour());
  }
  if (from.minute() != 0) {
    set_minute(from.minute());
  }
  if (from.second() != 0) {
    set_second(from.second());
  }
}

void Device_mode3_inSleep::CopyFrom(const Device_mode3_inSleep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EvLog.Device.mode3.inSleep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device_mode3_inSleep::IsInitialized() const {
  return true;
}

void Device_mode3_inSleep::Swap(Device_mode3_inSleep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Device_mode3_inSleep::InternalSwap(Device_mode3_inSleep* other) {
  std::swap(year_, other->year_);
  std::swap(month_, other->month_);
  std::swap(day_, other->day_);
  std::swap(hour_, other->hour_);
  std::swap(minute_, other->minute_);
  std::swap(second_, other->second_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Device_mode3_inSleep::GetTypeName() const {
  return "EvLog.Device.mode3.inSleep";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Device_mode3_inSleep

// uint32 Year = 1;
void Device_mode3_inSleep::clear_year() {
  year_ = 0u;
}
::google::protobuf::uint32 Device_mode3_inSleep::year() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode3.inSleep.Year)
  return year_;
}
void Device_mode3_inSleep::set_year(::google::protobuf::uint32 value) {
  
  year_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode3.inSleep.Year)
}

// uint32 Month = 2;
void Device_mode3_inSleep::clear_month() {
  month_ = 0u;
}
::google::protobuf::uint32 Device_mode3_inSleep::month() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode3.inSleep.Month)
  return month_;
}
void Device_mode3_inSleep::set_month(::google::protobuf::uint32 value) {
  
  month_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode3.inSleep.Month)
}

// uint32 Day = 3;
void Device_mode3_inSleep::clear_day() {
  day_ = 0u;
}
::google::protobuf::uint32 Device_mode3_inSleep::day() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode3.inSleep.Day)
  return day_;
}
void Device_mode3_inSleep::set_day(::google::protobuf::uint32 value) {
  
  day_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode3.inSleep.Day)
}

// uint32 Hour = 4;
void Device_mode3_inSleep::clear_hour() {
  hour_ = 0u;
}
::google::protobuf::uint32 Device_mode3_inSleep::hour() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode3.inSleep.Hour)
  return hour_;
}
void Device_mode3_inSleep::set_hour(::google::protobuf::uint32 value) {
  
  hour_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode3.inSleep.Hour)
}

// uint32 Minute = 5;
void Device_mode3_inSleep::clear_minute() {
  minute_ = 0u;
}
::google::protobuf::uint32 Device_mode3_inSleep::minute() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode3.inSleep.Minute)
  return minute_;
}
void Device_mode3_inSleep::set_minute(::google::protobuf::uint32 value) {
  
  minute_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode3.inSleep.Minute)
}

// uint32 Second = 6;
void Device_mode3_inSleep::clear_second() {
  second_ = 0u;
}
::google::protobuf::uint32 Device_mode3_inSleep::second() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode3.inSleep.Second)
  return second_;
}
void Device_mode3_inSleep::set_second(::google::protobuf::uint32 value) {
  
  second_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode3.inSleep.Second)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Device_mode3_outSleep::kYearFieldNumber;
const int Device_mode3_outSleep::kMonthFieldNumber;
const int Device_mode3_outSleep::kDayFieldNumber;
const int Device_mode3_outSleep::kHourFieldNumber;
const int Device_mode3_outSleep::kMinuteFieldNumber;
const int Device_mode3_outSleep::kSecondFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Device_mode3_outSleep::Device_mode3_outSleep()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_EventLog_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:EvLog.Device.mode3.outSleep)
}
Device_mode3_outSleep::Device_mode3_outSleep(const Device_mode3_outSleep& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&year_, &from.year_,
    reinterpret_cast<char*>(&second_) -
    reinterpret_cast<char*>(&year_) + sizeof(second_));
  // @@protoc_insertion_point(copy_constructor:EvLog.Device.mode3.outSleep)
}

void Device_mode3_outSleep::SharedCtor() {
  ::memset(&year_, 0, reinterpret_cast<char*>(&second_) -
    reinterpret_cast<char*>(&year_) + sizeof(second_));
  _cached_size_ = 0;
}

Device_mode3_outSleep::~Device_mode3_outSleep() {
  // @@protoc_insertion_point(destructor:EvLog.Device.mode3.outSleep)
  SharedDtor();
}

void Device_mode3_outSleep::SharedDtor() {
}

void Device_mode3_outSleep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Device_mode3_outSleep& Device_mode3_outSleep::default_instance() {
  protobuf_EventLog_2eproto::InitDefaults();
  return *internal_default_instance();
}

Device_mode3_outSleep* Device_mode3_outSleep::New(::google::protobuf::Arena* arena) const {
  Device_mode3_outSleep* n = new Device_mode3_outSleep;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Device_mode3_outSleep::Clear() {
// @@protoc_insertion_point(message_clear_start:EvLog.Device.mode3.outSleep)
  ::memset(&year_, 0, reinterpret_cast<char*>(&second_) -
    reinterpret_cast<char*>(&year_) + sizeof(second_));
}

bool Device_mode3_outSleep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EvLog.Device.mode3.outSleep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 Year = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Month = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Day = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Hour = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hour_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Minute = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Second = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EvLog.Device.mode3.outSleep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EvLog.Device.mode3.outSleep)
  return false;
#undef DO_
}

void Device_mode3_outSleep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EvLog.Device.mode3.outSleep)
  // uint32 Year = 1;
  if (this->year() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->year(), output);
  }

  // uint32 Month = 2;
  if (this->month() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->month(), output);
  }

  // uint32 Day = 3;
  if (this->day() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->day(), output);
  }

  // uint32 Hour = 4;
  if (this->hour() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hour(), output);
  }

  // uint32 Minute = 5;
  if (this->minute() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->minute(), output);
  }

  // uint32 Second = 6;
  if (this->second() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->second(), output);
  }

  // @@protoc_insertion_point(serialize_end:EvLog.Device.mode3.outSleep)
}

size_t Device_mode3_outSleep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EvLog.Device.mode3.outSleep)
  size_t total_size = 0;

  // uint32 Year = 1;
  if (this->year() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->year());
  }

  // uint32 Month = 2;
  if (this->month() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->month());
  }

  // uint32 Day = 3;
  if (this->day() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->day());
  }

  // uint32 Hour = 4;
  if (this->hour() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hour());
  }

  // uint32 Minute = 5;
  if (this->minute() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minute());
  }

  // uint32 Second = 6;
  if (this->second() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->second());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Device_mode3_outSleep::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Device_mode3_outSleep*>(&from));
}

void Device_mode3_outSleep::MergeFrom(const Device_mode3_outSleep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EvLog.Device.mode3.outSleep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.year() != 0) {
    set_year(from.year());
  }
  if (from.month() != 0) {
    set_month(from.month());
  }
  if (from.day() != 0) {
    set_day(from.day());
  }
  if (from.hour() != 0) {
    set_hour(from.hour());
  }
  if (from.minute() != 0) {
    set_minute(from.minute());
  }
  if (from.second() != 0) {
    set_second(from.second());
  }
}

void Device_mode3_outSleep::CopyFrom(const Device_mode3_outSleep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EvLog.Device.mode3.outSleep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device_mode3_outSleep::IsInitialized() const {
  return true;
}

void Device_mode3_outSleep::Swap(Device_mode3_outSleep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Device_mode3_outSleep::InternalSwap(Device_mode3_outSleep* other) {
  std::swap(year_, other->year_);
  std::swap(month_, other->month_);
  std::swap(day_, other->day_);
  std::swap(hour_, other->hour_);
  std::swap(minute_, other->minute_);
  std::swap(second_, other->second_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Device_mode3_outSleep::GetTypeName() const {
  return "EvLog.Device.mode3.outSleep";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Device_mode3_outSleep

// uint32 Year = 1;
void Device_mode3_outSleep::clear_year() {
  year_ = 0u;
}
::google::protobuf::uint32 Device_mode3_outSleep::year() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode3.outSleep.Year)
  return year_;
}
void Device_mode3_outSleep::set_year(::google::protobuf::uint32 value) {
  
  year_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode3.outSleep.Year)
}

// uint32 Month = 2;
void Device_mode3_outSleep::clear_month() {
  month_ = 0u;
}
::google::protobuf::uint32 Device_mode3_outSleep::month() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode3.outSleep.Month)
  return month_;
}
void Device_mode3_outSleep::set_month(::google::protobuf::uint32 value) {
  
  month_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode3.outSleep.Month)
}

// uint32 Day = 3;
void Device_mode3_outSleep::clear_day() {
  day_ = 0u;
}
::google::protobuf::uint32 Device_mode3_outSleep::day() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode3.outSleep.Day)
  return day_;
}
void Device_mode3_outSleep::set_day(::google::protobuf::uint32 value) {
  
  day_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode3.outSleep.Day)
}

// uint32 Hour = 4;
void Device_mode3_outSleep::clear_hour() {
  hour_ = 0u;
}
::google::protobuf::uint32 Device_mode3_outSleep::hour() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode3.outSleep.Hour)
  return hour_;
}
void Device_mode3_outSleep::set_hour(::google::protobuf::uint32 value) {
  
  hour_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode3.outSleep.Hour)
}

// uint32 Minute = 5;
void Device_mode3_outSleep::clear_minute() {
  minute_ = 0u;
}
::google::protobuf::uint32 Device_mode3_outSleep::minute() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode3.outSleep.Minute)
  return minute_;
}
void Device_mode3_outSleep::set_minute(::google::protobuf::uint32 value) {
  
  minute_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode3.outSleep.Minute)
}

// uint32 Second = 6;
void Device_mode3_outSleep::clear_second() {
  second_ = 0u;
}
::google::protobuf::uint32 Device_mode3_outSleep::second() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode3.outSleep.Second)
  return second_;
}
void Device_mode3_outSleep::set_second(::google::protobuf::uint32 value) {
  
  second_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode3.outSleep.Second)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Device_mode3::kModeOutFieldNumber;
const int Device_mode3::kInslpFieldNumber;
const int Device_mode3::kOutslpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Device_mode3::Device_mode3()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_EventLog_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:EvLog.Device.mode3)
}
Device_mode3::Device_mode3(const Device_mode3& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_inslp()) {
    inslp_ = new ::EvLog::Device_mode3_inSleep(*from.inslp_);
  } else {
    inslp_ = NULL;
  }
  if (from.has_outslp()) {
    outslp_ = new ::EvLog::Device_mode3_outSleep(*from.outslp_);
  } else {
    outslp_ = NULL;
  }
  modeout_ = from.modeout_;
  // @@protoc_insertion_point(copy_constructor:EvLog.Device.mode3)
}

void Device_mode3::SharedCtor() {
  ::memset(&inslp_, 0, reinterpret_cast<char*>(&modeout_) -
    reinterpret_cast<char*>(&inslp_) + sizeof(modeout_));
  _cached_size_ = 0;
}

Device_mode3::~Device_mode3() {
  // @@protoc_insertion_point(destructor:EvLog.Device.mode3)
  SharedDtor();
}

void Device_mode3::SharedDtor() {
  if (this != internal_default_instance()) {
    delete inslp_;
  }
  if (this != internal_default_instance()) {
    delete outslp_;
  }
}

void Device_mode3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Device_mode3& Device_mode3::default_instance() {
  protobuf_EventLog_2eproto::InitDefaults();
  return *internal_default_instance();
}

Device_mode3* Device_mode3::New(::google::protobuf::Arena* arena) const {
  Device_mode3* n = new Device_mode3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Device_mode3::Clear() {
// @@protoc_insertion_point(message_clear_start:EvLog.Device.mode3)
  if (GetArenaNoVirtual() == NULL && inslp_ != NULL) {
    delete inslp_;
  }
  inslp_ = NULL;
  if (GetArenaNoVirtual() == NULL && outslp_ != NULL) {
    delete outslp_;
  }
  outslp_ = NULL;
  modeout_ = 0u;
}

bool Device_mode3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EvLog.Device.mode3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 ModeOut = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .EvLog.Device.mode3.inSleep inslp = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inslp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .EvLog.Device.mode3.outSleep outslp = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_outslp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EvLog.Device.mode3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EvLog.Device.mode3)
  return false;
#undef DO_
}

void Device_mode3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EvLog.Device.mode3)
  // uint32 ModeOut = 1;
  if (this->modeout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->modeout(), output);
  }

  // .EvLog.Device.mode3.inSleep inslp = 2;
  if (this->has_inslp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->inslp_, output);
  }

  // .EvLog.Device.mode3.outSleep outslp = 3;
  if (this->has_outslp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->outslp_, output);
  }

  // @@protoc_insertion_point(serialize_end:EvLog.Device.mode3)
}

size_t Device_mode3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EvLog.Device.mode3)
  size_t total_size = 0;

  // .EvLog.Device.mode3.inSleep inslp = 2;
  if (this->has_inslp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->inslp_);
  }

  // .EvLog.Device.mode3.outSleep outslp = 3;
  if (this->has_outslp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->outslp_);
  }

  // uint32 ModeOut = 1;
  if (this->modeout() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->modeout());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Device_mode3::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Device_mode3*>(&from));
}

void Device_mode3::MergeFrom(const Device_mode3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EvLog.Device.mode3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_inslp()) {
    mutable_inslp()->::EvLog::Device_mode3_inSleep::MergeFrom(from.inslp());
  }
  if (from.has_outslp()) {
    mutable_outslp()->::EvLog::Device_mode3_outSleep::MergeFrom(from.outslp());
  }
  if (from.modeout() != 0) {
    set_modeout(from.modeout());
  }
}

void Device_mode3::CopyFrom(const Device_mode3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EvLog.Device.mode3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device_mode3::IsInitialized() const {
  return true;
}

void Device_mode3::Swap(Device_mode3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Device_mode3::InternalSwap(Device_mode3* other) {
  std::swap(inslp_, other->inslp_);
  std::swap(outslp_, other->outslp_);
  std::swap(modeout_, other->modeout_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Device_mode3::GetTypeName() const {
  return "EvLog.Device.mode3";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Device_mode3

// uint32 ModeOut = 1;
void Device_mode3::clear_modeout() {
  modeout_ = 0u;
}
::google::protobuf::uint32 Device_mode3::modeout() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode3.ModeOut)
  return modeout_;
}
void Device_mode3::set_modeout(::google::protobuf::uint32 value) {
  
  modeout_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode3.ModeOut)
}

// .EvLog.Device.mode3.inSleep inslp = 2;
bool Device_mode3::has_inslp() const {
  return this != internal_default_instance() && inslp_ != NULL;
}
void Device_mode3::clear_inslp() {
  if (GetArenaNoVirtual() == NULL && inslp_ != NULL) delete inslp_;
  inslp_ = NULL;
}
const ::EvLog::Device_mode3_inSleep& Device_mode3::inslp() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode3.inslp)
  return inslp_ != NULL ? *inslp_
                         : *::EvLog::Device_mode3_inSleep::internal_default_instance();
}
::EvLog::Device_mode3_inSleep* Device_mode3::mutable_inslp() {
  
  if (inslp_ == NULL) {
    inslp_ = new ::EvLog::Device_mode3_inSleep;
  }
  // @@protoc_insertion_point(field_mutable:EvLog.Device.mode3.inslp)
  return inslp_;
}
::EvLog::Device_mode3_inSleep* Device_mode3::release_inslp() {
  // @@protoc_insertion_point(field_release:EvLog.Device.mode3.inslp)
  
  ::EvLog::Device_mode3_inSleep* temp = inslp_;
  inslp_ = NULL;
  return temp;
}
void Device_mode3::set_allocated_inslp(::EvLog::Device_mode3_inSleep* inslp) {
  delete inslp_;
  inslp_ = inslp;
  if (inslp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:EvLog.Device.mode3.inslp)
}

// .EvLog.Device.mode3.outSleep outslp = 3;
bool Device_mode3::has_outslp() const {
  return this != internal_default_instance() && outslp_ != NULL;
}
void Device_mode3::clear_outslp() {
  if (GetArenaNoVirtual() == NULL && outslp_ != NULL) delete outslp_;
  outslp_ = NULL;
}
const ::EvLog::Device_mode3_outSleep& Device_mode3::outslp() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode3.outslp)
  return outslp_ != NULL ? *outslp_
                         : *::EvLog::Device_mode3_outSleep::internal_default_instance();
}
::EvLog::Device_mode3_outSleep* Device_mode3::mutable_outslp() {
  
  if (outslp_ == NULL) {
    outslp_ = new ::EvLog::Device_mode3_outSleep;
  }
  // @@protoc_insertion_point(field_mutable:EvLog.Device.mode3.outslp)
  return outslp_;
}
::EvLog::Device_mode3_outSleep* Device_mode3::release_outslp() {
  // @@protoc_insertion_point(field_release:EvLog.Device.mode3.outslp)
  
  ::EvLog::Device_mode3_outSleep* temp = outslp_;
  outslp_ = NULL;
  return temp;
}
void Device_mode3::set_allocated_outslp(::EvLog::Device_mode3_outSleep* outslp) {
  delete outslp_;
  outslp_ = outslp;
  if (outslp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:EvLog.Device.mode3.outslp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Device_mode4::kActivationStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Device_mode4::Device_mode4()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_EventLog_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:EvLog.Device.mode4)
}
Device_mode4::Device_mode4(const Device_mode4& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  activationstate_ = from.activationstate_;
  // @@protoc_insertion_point(copy_constructor:EvLog.Device.mode4)
}

void Device_mode4::SharedCtor() {
  activationstate_ = false;
  _cached_size_ = 0;
}

Device_mode4::~Device_mode4() {
  // @@protoc_insertion_point(destructor:EvLog.Device.mode4)
  SharedDtor();
}

void Device_mode4::SharedDtor() {
}

void Device_mode4::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Device_mode4& Device_mode4::default_instance() {
  protobuf_EventLog_2eproto::InitDefaults();
  return *internal_default_instance();
}

Device_mode4* Device_mode4::New(::google::protobuf::Arena* arena) const {
  Device_mode4* n = new Device_mode4;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Device_mode4::Clear() {
// @@protoc_insertion_point(message_clear_start:EvLog.Device.mode4)
  activationstate_ = false;
}

bool Device_mode4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EvLog.Device.mode4)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool ActivationState = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &activationstate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EvLog.Device.mode4)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EvLog.Device.mode4)
  return false;
#undef DO_
}

void Device_mode4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EvLog.Device.mode4)
  // bool ActivationState = 1;
  if (this->activationstate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->activationstate(), output);
  }

  // @@protoc_insertion_point(serialize_end:EvLog.Device.mode4)
}

size_t Device_mode4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EvLog.Device.mode4)
  size_t total_size = 0;

  // bool ActivationState = 1;
  if (this->activationstate() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Device_mode4::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Device_mode4*>(&from));
}

void Device_mode4::MergeFrom(const Device_mode4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EvLog.Device.mode4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.activationstate() != 0) {
    set_activationstate(from.activationstate());
  }
}

void Device_mode4::CopyFrom(const Device_mode4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EvLog.Device.mode4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device_mode4::IsInitialized() const {
  return true;
}

void Device_mode4::Swap(Device_mode4* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Device_mode4::InternalSwap(Device_mode4* other) {
  std::swap(activationstate_, other->activationstate_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Device_mode4::GetTypeName() const {
  return "EvLog.Device.mode4";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Device_mode4

// bool ActivationState = 1;
void Device_mode4::clear_activationstate() {
  activationstate_ = false;
}
bool Device_mode4::activationstate() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.mode4.ActivationState)
  return activationstate_;
}
void Device_mode4::set_activationstate(bool value) {
  
  activationstate_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.mode4.ActivationState)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Device::kUniqueIdFieldNumber;
const int Device::kSignalLvlFieldNumber;
const int Device::kSignalQualityFieldNumber;
const int Device::kBatteryLvlFieldNumber;
const int Device::kWorkModeFieldNumber;
const int Device::kPmode1FieldNumber;
const int Device::kPmode2FieldNumber;
const int Device::kPmode3FieldNumber;
const int Device::kPmode4FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Device::Device()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_EventLog_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:EvLog.Device)
}
Device::Device(const Device& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pmode1()) {
    pmode1_ = new ::EvLog::Device_mode1(*from.pmode1_);
  } else {
    pmode1_ = NULL;
  }
  if (from.has_pmode2()) {
    pmode2_ = new ::EvLog::Device_mode2(*from.pmode2_);
  } else {
    pmode2_ = NULL;
  }
  if (from.has_pmode3()) {
    pmode3_ = new ::EvLog::Device_mode3(*from.pmode3_);
  } else {
    pmode3_ = NULL;
  }
  if (from.has_pmode4()) {
    pmode4_ = new ::EvLog::Device_mode4(*from.pmode4_);
  } else {
    pmode4_ = NULL;
  }
  ::memcpy(&unique_id_, &from.unique_id_,
    reinterpret_cast<char*>(&work_mode_) -
    reinterpret_cast<char*>(&unique_id_) + sizeof(work_mode_));
  // @@protoc_insertion_point(copy_constructor:EvLog.Device)
}

void Device::SharedCtor() {
  ::memset(&pmode1_, 0, reinterpret_cast<char*>(&work_mode_) -
    reinterpret_cast<char*>(&pmode1_) + sizeof(work_mode_));
  _cached_size_ = 0;
}

Device::~Device() {
  // @@protoc_insertion_point(destructor:EvLog.Device)
  SharedDtor();
}

void Device::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pmode1_;
  }
  if (this != internal_default_instance()) {
    delete pmode2_;
  }
  if (this != internal_default_instance()) {
    delete pmode3_;
  }
  if (this != internal_default_instance()) {
    delete pmode4_;
  }
}

void Device::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Device& Device::default_instance() {
  protobuf_EventLog_2eproto::InitDefaults();
  return *internal_default_instance();
}

Device* Device::New(::google::protobuf::Arena* arena) const {
  Device* n = new Device;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Device::Clear() {
// @@protoc_insertion_point(message_clear_start:EvLog.Device)
  if (GetArenaNoVirtual() == NULL && pmode1_ != NULL) {
    delete pmode1_;
  }
  pmode1_ = NULL;
  if (GetArenaNoVirtual() == NULL && pmode2_ != NULL) {
    delete pmode2_;
  }
  pmode2_ = NULL;
  if (GetArenaNoVirtual() == NULL && pmode3_ != NULL) {
    delete pmode3_;
  }
  pmode3_ = NULL;
  if (GetArenaNoVirtual() == NULL && pmode4_ != NULL) {
    delete pmode4_;
  }
  pmode4_ = NULL;
  ::memset(&unique_id_, 0, reinterpret_cast<char*>(&work_mode_) -
    reinterpret_cast<char*>(&unique_id_) + sizeof(work_mode_));
}

bool Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EvLog.Device)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 unique_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unique_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 signal_lvl = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &signal_lvl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 signal_quality = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &signal_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double battery_lvl = 5;
      case 5: {
        if (tag == 41u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &battery_lvl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 work_mode = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &work_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .EvLog.Device.mode1 pmode1 = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pmode1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .EvLog.Device.mode2 pmode2 = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pmode2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .EvLog.Device.mode3 pmode3 = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pmode3()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .EvLog.Device.mode4 pmode4 = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pmode4()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EvLog.Device)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EvLog.Device)
  return false;
#undef DO_
}

void Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EvLog.Device)
  // uint32 unique_id = 1;
  if (this->unique_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unique_id(), output);
  }

  // sint32 signal_lvl = 3;
  if (this->signal_lvl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->signal_lvl(), output);
  }

  // uint32 signal_quality = 4;
  if (this->signal_quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->signal_quality(), output);
  }

  // double battery_lvl = 5;
  if (this->battery_lvl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->battery_lvl(), output);
  }

  // uint32 work_mode = 6;
  if (this->work_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->work_mode(), output);
  }

  // .EvLog.Device.mode1 pmode1 = 7;
  if (this->has_pmode1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->pmode1_, output);
  }

  // .EvLog.Device.mode2 pmode2 = 8;
  if (this->has_pmode2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->pmode2_, output);
  }

  // .EvLog.Device.mode3 pmode3 = 9;
  if (this->has_pmode3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *this->pmode3_, output);
  }

  // .EvLog.Device.mode4 pmode4 = 10;
  if (this->has_pmode4()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, *this->pmode4_, output);
  }

  // @@protoc_insertion_point(serialize_end:EvLog.Device)
}

size_t Device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EvLog.Device)
  size_t total_size = 0;

  // .EvLog.Device.mode1 pmode1 = 7;
  if (this->has_pmode1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pmode1_);
  }

  // .EvLog.Device.mode2 pmode2 = 8;
  if (this->has_pmode2()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pmode2_);
  }

  // .EvLog.Device.mode3 pmode3 = 9;
  if (this->has_pmode3()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pmode3_);
  }

  // .EvLog.Device.mode4 pmode4 = 10;
  if (this->has_pmode4()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pmode4_);
  }

  // uint32 unique_id = 1;
  if (this->unique_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->unique_id());
  }

  // sint32 signal_lvl = 3;
  if (this->signal_lvl() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->signal_lvl());
  }

  // double battery_lvl = 5;
  if (this->battery_lvl() != 0) {
    total_size += 1 + 8;
  }

  // uint32 signal_quality = 4;
  if (this->signal_quality() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->signal_quality());
  }

  // uint32 work_mode = 6;
  if (this->work_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->work_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Device::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Device*>(&from));
}

void Device::MergeFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EvLog.Device)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pmode1()) {
    mutable_pmode1()->::EvLog::Device_mode1::MergeFrom(from.pmode1());
  }
  if (from.has_pmode2()) {
    mutable_pmode2()->::EvLog::Device_mode2::MergeFrom(from.pmode2());
  }
  if (from.has_pmode3()) {
    mutable_pmode3()->::EvLog::Device_mode3::MergeFrom(from.pmode3());
  }
  if (from.has_pmode4()) {
    mutable_pmode4()->::EvLog::Device_mode4::MergeFrom(from.pmode4());
  }
  if (from.unique_id() != 0) {
    set_unique_id(from.unique_id());
  }
  if (from.signal_lvl() != 0) {
    set_signal_lvl(from.signal_lvl());
  }
  if (from.battery_lvl() != 0) {
    set_battery_lvl(from.battery_lvl());
  }
  if (from.signal_quality() != 0) {
    set_signal_quality(from.signal_quality());
  }
  if (from.work_mode() != 0) {
    set_work_mode(from.work_mode());
  }
}

void Device::CopyFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EvLog.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device::IsInitialized() const {
  return true;
}

void Device::Swap(Device* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Device::InternalSwap(Device* other) {
  std::swap(pmode1_, other->pmode1_);
  std::swap(pmode2_, other->pmode2_);
  std::swap(pmode3_, other->pmode3_);
  std::swap(pmode4_, other->pmode4_);
  std::swap(unique_id_, other->unique_id_);
  std::swap(signal_lvl_, other->signal_lvl_);
  std::swap(battery_lvl_, other->battery_lvl_);
  std::swap(signal_quality_, other->signal_quality_);
  std::swap(work_mode_, other->work_mode_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Device::GetTypeName() const {
  return "EvLog.Device";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Device

// uint32 unique_id = 1;
void Device::clear_unique_id() {
  unique_id_ = 0u;
}
::google::protobuf::uint32 Device::unique_id() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.unique_id)
  return unique_id_;
}
void Device::set_unique_id(::google::protobuf::uint32 value) {
  
  unique_id_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.unique_id)
}

// sint32 signal_lvl = 3;
void Device::clear_signal_lvl() {
  signal_lvl_ = 0;
}
::google::protobuf::int32 Device::signal_lvl() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.signal_lvl)
  return signal_lvl_;
}
void Device::set_signal_lvl(::google::protobuf::int32 value) {
  
  signal_lvl_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.signal_lvl)
}

// uint32 signal_quality = 4;
void Device::clear_signal_quality() {
  signal_quality_ = 0u;
}
::google::protobuf::uint32 Device::signal_quality() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.signal_quality)
  return signal_quality_;
}
void Device::set_signal_quality(::google::protobuf::uint32 value) {
  
  signal_quality_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.signal_quality)
}

// double battery_lvl = 5;
void Device::clear_battery_lvl() {
  battery_lvl_ = 0;
}
double Device::battery_lvl() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.battery_lvl)
  return battery_lvl_;
}
void Device::set_battery_lvl(double value) {
  
  battery_lvl_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.battery_lvl)
}

// uint32 work_mode = 6;
void Device::clear_work_mode() {
  work_mode_ = 0u;
}
::google::protobuf::uint32 Device::work_mode() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.work_mode)
  return work_mode_;
}
void Device::set_work_mode(::google::protobuf::uint32 value) {
  
  work_mode_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Device.work_mode)
}

// .EvLog.Device.mode1 pmode1 = 7;
bool Device::has_pmode1() const {
  return this != internal_default_instance() && pmode1_ != NULL;
}
void Device::clear_pmode1() {
  if (GetArenaNoVirtual() == NULL && pmode1_ != NULL) delete pmode1_;
  pmode1_ = NULL;
}
const ::EvLog::Device_mode1& Device::pmode1() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.pmode1)
  return pmode1_ != NULL ? *pmode1_
                         : *::EvLog::Device_mode1::internal_default_instance();
}
::EvLog::Device_mode1* Device::mutable_pmode1() {
  
  if (pmode1_ == NULL) {
    pmode1_ = new ::EvLog::Device_mode1;
  }
  // @@protoc_insertion_point(field_mutable:EvLog.Device.pmode1)
  return pmode1_;
}
::EvLog::Device_mode1* Device::release_pmode1() {
  // @@protoc_insertion_point(field_release:EvLog.Device.pmode1)
  
  ::EvLog::Device_mode1* temp = pmode1_;
  pmode1_ = NULL;
  return temp;
}
void Device::set_allocated_pmode1(::EvLog::Device_mode1* pmode1) {
  delete pmode1_;
  pmode1_ = pmode1;
  if (pmode1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:EvLog.Device.pmode1)
}

// .EvLog.Device.mode2 pmode2 = 8;
bool Device::has_pmode2() const {
  return this != internal_default_instance() && pmode2_ != NULL;
}
void Device::clear_pmode2() {
  if (GetArenaNoVirtual() == NULL && pmode2_ != NULL) delete pmode2_;
  pmode2_ = NULL;
}
const ::EvLog::Device_mode2& Device::pmode2() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.pmode2)
  return pmode2_ != NULL ? *pmode2_
                         : *::EvLog::Device_mode2::internal_default_instance();
}
::EvLog::Device_mode2* Device::mutable_pmode2() {
  
  if (pmode2_ == NULL) {
    pmode2_ = new ::EvLog::Device_mode2;
  }
  // @@protoc_insertion_point(field_mutable:EvLog.Device.pmode2)
  return pmode2_;
}
::EvLog::Device_mode2* Device::release_pmode2() {
  // @@protoc_insertion_point(field_release:EvLog.Device.pmode2)
  
  ::EvLog::Device_mode2* temp = pmode2_;
  pmode2_ = NULL;
  return temp;
}
void Device::set_allocated_pmode2(::EvLog::Device_mode2* pmode2) {
  delete pmode2_;
  pmode2_ = pmode2;
  if (pmode2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:EvLog.Device.pmode2)
}

// .EvLog.Device.mode3 pmode3 = 9;
bool Device::has_pmode3() const {
  return this != internal_default_instance() && pmode3_ != NULL;
}
void Device::clear_pmode3() {
  if (GetArenaNoVirtual() == NULL && pmode3_ != NULL) delete pmode3_;
  pmode3_ = NULL;
}
const ::EvLog::Device_mode3& Device::pmode3() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.pmode3)
  return pmode3_ != NULL ? *pmode3_
                         : *::EvLog::Device_mode3::internal_default_instance();
}
::EvLog::Device_mode3* Device::mutable_pmode3() {
  
  if (pmode3_ == NULL) {
    pmode3_ = new ::EvLog::Device_mode3;
  }
  // @@protoc_insertion_point(field_mutable:EvLog.Device.pmode3)
  return pmode3_;
}
::EvLog::Device_mode3* Device::release_pmode3() {
  // @@protoc_insertion_point(field_release:EvLog.Device.pmode3)
  
  ::EvLog::Device_mode3* temp = pmode3_;
  pmode3_ = NULL;
  return temp;
}
void Device::set_allocated_pmode3(::EvLog::Device_mode3* pmode3) {
  delete pmode3_;
  pmode3_ = pmode3;
  if (pmode3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:EvLog.Device.pmode3)
}

// .EvLog.Device.mode4 pmode4 = 10;
bool Device::has_pmode4() const {
  return this != internal_default_instance() && pmode4_ != NULL;
}
void Device::clear_pmode4() {
  if (GetArenaNoVirtual() == NULL && pmode4_ != NULL) delete pmode4_;
  pmode4_ = NULL;
}
const ::EvLog::Device_mode4& Device::pmode4() const {
  // @@protoc_insertion_point(field_get:EvLog.Device.pmode4)
  return pmode4_ != NULL ? *pmode4_
                         : *::EvLog::Device_mode4::internal_default_instance();
}
::EvLog::Device_mode4* Device::mutable_pmode4() {
  
  if (pmode4_ == NULL) {
    pmode4_ = new ::EvLog::Device_mode4;
  }
  // @@protoc_insertion_point(field_mutable:EvLog.Device.pmode4)
  return pmode4_;
}
::EvLog::Device_mode4* Device::release_pmode4() {
  // @@protoc_insertion_point(field_release:EvLog.Device.pmode4)
  
  ::EvLog::Device_mode4* temp = pmode4_;
  pmode4_ = NULL;
  return temp;
}
void Device::set_allocated_pmode4(::EvLog::Device_mode4* pmode4) {
  delete pmode4_;
  pmode4_ = pmode4;
  if (pmode4) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:EvLog.Device.pmode4)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TD::kYearFieldNumber;
const int TD::kMonthFieldNumber;
const int TD::kDayFieldNumber;
const int TD::kHourFieldNumber;
const int TD::kMinuteFieldNumber;
const int TD::kSecondFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TD::TD()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_EventLog_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:EvLog.TD)
}
TD::TD(const TD& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&year_, &from.year_,
    reinterpret_cast<char*>(&second_) -
    reinterpret_cast<char*>(&year_) + sizeof(second_));
  // @@protoc_insertion_point(copy_constructor:EvLog.TD)
}

void TD::SharedCtor() {
  ::memset(&year_, 0, reinterpret_cast<char*>(&second_) -
    reinterpret_cast<char*>(&year_) + sizeof(second_));
  _cached_size_ = 0;
}

TD::~TD() {
  // @@protoc_insertion_point(destructor:EvLog.TD)
  SharedDtor();
}

void TD::SharedDtor() {
}

void TD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TD& TD::default_instance() {
  protobuf_EventLog_2eproto::InitDefaults();
  return *internal_default_instance();
}

TD* TD::New(::google::protobuf::Arena* arena) const {
  TD* n = new TD;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TD::Clear() {
// @@protoc_insertion_point(message_clear_start:EvLog.TD)
  ::memset(&year_, 0, reinterpret_cast<char*>(&second_) -
    reinterpret_cast<char*>(&year_) + sizeof(second_));
}

bool TD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EvLog.TD)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 Year = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Month = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Day = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Hour = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hour_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Minute = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Second = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EvLog.TD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EvLog.TD)
  return false;
#undef DO_
}

void TD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EvLog.TD)
  // uint32 Year = 1;
  if (this->year() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->year(), output);
  }

  // uint32 Month = 2;
  if (this->month() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->month(), output);
  }

  // uint32 Day = 3;
  if (this->day() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->day(), output);
  }

  // uint32 Hour = 4;
  if (this->hour() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hour(), output);
  }

  // uint32 Minute = 5;
  if (this->minute() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->minute(), output);
  }

  // uint32 Second = 6;
  if (this->second() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->second(), output);
  }

  // @@protoc_insertion_point(serialize_end:EvLog.TD)
}

size_t TD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EvLog.TD)
  size_t total_size = 0;

  // uint32 Year = 1;
  if (this->year() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->year());
  }

  // uint32 Month = 2;
  if (this->month() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->month());
  }

  // uint32 Day = 3;
  if (this->day() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->day());
  }

  // uint32 Hour = 4;
  if (this->hour() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hour());
  }

  // uint32 Minute = 5;
  if (this->minute() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minute());
  }

  // uint32 Second = 6;
  if (this->second() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->second());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TD::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TD*>(&from));
}

void TD::MergeFrom(const TD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EvLog.TD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.year() != 0) {
    set_year(from.year());
  }
  if (from.month() != 0) {
    set_month(from.month());
  }
  if (from.day() != 0) {
    set_day(from.day());
  }
  if (from.hour() != 0) {
    set_hour(from.hour());
  }
  if (from.minute() != 0) {
    set_minute(from.minute());
  }
  if (from.second() != 0) {
    set_second(from.second());
  }
}

void TD::CopyFrom(const TD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EvLog.TD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TD::IsInitialized() const {
  return true;
}

void TD::Swap(TD* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TD::InternalSwap(TD* other) {
  std::swap(year_, other->year_);
  std::swap(month_, other->month_);
  std::swap(day_, other->day_);
  std::swap(hour_, other->hour_);
  std::swap(minute_, other->minute_);
  std::swap(second_, other->second_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TD::GetTypeName() const {
  return "EvLog.TD";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TD

// uint32 Year = 1;
void TD::clear_year() {
  year_ = 0u;
}
::google::protobuf::uint32 TD::year() const {
  // @@protoc_insertion_point(field_get:EvLog.TD.Year)
  return year_;
}
void TD::set_year(::google::protobuf::uint32 value) {
  
  year_ = value;
  // @@protoc_insertion_point(field_set:EvLog.TD.Year)
}

// uint32 Month = 2;
void TD::clear_month() {
  month_ = 0u;
}
::google::protobuf::uint32 TD::month() const {
  // @@protoc_insertion_point(field_get:EvLog.TD.Month)
  return month_;
}
void TD::set_month(::google::protobuf::uint32 value) {
  
  month_ = value;
  // @@protoc_insertion_point(field_set:EvLog.TD.Month)
}

// uint32 Day = 3;
void TD::clear_day() {
  day_ = 0u;
}
::google::protobuf::uint32 TD::day() const {
  // @@protoc_insertion_point(field_get:EvLog.TD.Day)
  return day_;
}
void TD::set_day(::google::protobuf::uint32 value) {
  
  day_ = value;
  // @@protoc_insertion_point(field_set:EvLog.TD.Day)
}

// uint32 Hour = 4;
void TD::clear_hour() {
  hour_ = 0u;
}
::google::protobuf::uint32 TD::hour() const {
  // @@protoc_insertion_point(field_get:EvLog.TD.Hour)
  return hour_;
}
void TD::set_hour(::google::protobuf::uint32 value) {
  
  hour_ = value;
  // @@protoc_insertion_point(field_set:EvLog.TD.Hour)
}

// uint32 Minute = 5;
void TD::clear_minute() {
  minute_ = 0u;
}
::google::protobuf::uint32 TD::minute() const {
  // @@protoc_insertion_point(field_get:EvLog.TD.Minute)
  return minute_;
}
void TD::set_minute(::google::protobuf::uint32 value) {
  
  minute_ = value;
  // @@protoc_insertion_point(field_set:EvLog.TD.Minute)
}

// uint32 Second = 6;
void TD::clear_second() {
  second_ = 0u;
}
::google::protobuf::uint32 TD::second() const {
  // @@protoc_insertion_point(field_get:EvLog.TD.Second)
  return second_;
}
void TD::set_second(::google::protobuf::uint32 value) {
  
  second_ = value;
  // @@protoc_insertion_point(field_set:EvLog.TD.Second)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Event::kDevFieldNumber;
const int Event::kECodeFieldNumber;
const int Event::kTdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Event::Event()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_EventLog_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:EvLog.Event)
}
Event::Event(const Event& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dev()) {
    dev_ = new ::EvLog::Device(*from.dev_);
  } else {
    dev_ = NULL;
  }
  if (from.has_td()) {
    td_ = new ::EvLog::TD(*from.td_);
  } else {
    td_ = NULL;
  }
  ecode_ = from.ecode_;
  // @@protoc_insertion_point(copy_constructor:EvLog.Event)
}

void Event::SharedCtor() {
  ::memset(&dev_, 0, reinterpret_cast<char*>(&ecode_) -
    reinterpret_cast<char*>(&dev_) + sizeof(ecode_));
  _cached_size_ = 0;
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:EvLog.Event)
  SharedDtor();
}

void Event::SharedDtor() {
  if (this != internal_default_instance()) {
    delete dev_;
  }
  if (this != internal_default_instance()) {
    delete td_;
  }
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Event& Event::default_instance() {
  protobuf_EventLog_2eproto::InitDefaults();
  return *internal_default_instance();
}

Event* Event::New(::google::protobuf::Arena* arena) const {
  Event* n = new Event;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:EvLog.Event)
  if (GetArenaNoVirtual() == NULL && dev_ != NULL) {
    delete dev_;
  }
  dev_ = NULL;
  if (GetArenaNoVirtual() == NULL && td_ != NULL) {
    delete td_;
  }
  td_ = NULL;
  ecode_ = 0u;
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EvLog.Event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .EvLog.Device dev = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 eCode = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ecode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .EvLog.TD td = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_td()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EvLog.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EvLog.Event)
  return false;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EvLog.Event)
  // .EvLog.Device dev = 1;
  if (this->has_dev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->dev_, output);
  }

  // uint32 eCode = 2;
  if (this->ecode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ecode(), output);
  }

  // .EvLog.TD td = 3;
  if (this->has_td()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->td_, output);
  }

  // @@protoc_insertion_point(serialize_end:EvLog.Event)
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EvLog.Event)
  size_t total_size = 0;

  // .EvLog.Device dev = 1;
  if (this->has_dev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dev_);
  }

  // .EvLog.TD td = 3;
  if (this->has_td()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->td_);
  }

  // uint32 eCode = 2;
  if (this->ecode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ecode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Event*>(&from));
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EvLog.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dev()) {
    mutable_dev()->::EvLog::Device::MergeFrom(from.dev());
  }
  if (from.has_td()) {
    mutable_td()->::EvLog::TD::MergeFrom(from.td());
  }
  if (from.ecode() != 0) {
    set_ecode(from.ecode());
  }
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EvLog.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::Swap(Event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Event::InternalSwap(Event* other) {
  std::swap(dev_, other->dev_);
  std::swap(td_, other->td_);
  std::swap(ecode_, other->ecode_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Event::GetTypeName() const {
  return "EvLog.Event";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Event

// .EvLog.Device dev = 1;
bool Event::has_dev() const {
  return this != internal_default_instance() && dev_ != NULL;
}
void Event::clear_dev() {
  if (GetArenaNoVirtual() == NULL && dev_ != NULL) delete dev_;
  dev_ = NULL;
}
const ::EvLog::Device& Event::dev() const {
  // @@protoc_insertion_point(field_get:EvLog.Event.dev)
  return dev_ != NULL ? *dev_
                         : *::EvLog::Device::internal_default_instance();
}
::EvLog::Device* Event::mutable_dev() {
  
  if (dev_ == NULL) {
    dev_ = new ::EvLog::Device;
  }
  // @@protoc_insertion_point(field_mutable:EvLog.Event.dev)
  return dev_;
}
::EvLog::Device* Event::release_dev() {
  // @@protoc_insertion_point(field_release:EvLog.Event.dev)
  
  ::EvLog::Device* temp = dev_;
  dev_ = NULL;
  return temp;
}
void Event::set_allocated_dev(::EvLog::Device* dev) {
  delete dev_;
  dev_ = dev;
  if (dev) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:EvLog.Event.dev)
}

// uint32 eCode = 2;
void Event::clear_ecode() {
  ecode_ = 0u;
}
::google::protobuf::uint32 Event::ecode() const {
  // @@protoc_insertion_point(field_get:EvLog.Event.eCode)
  return ecode_;
}
void Event::set_ecode(::google::protobuf::uint32 value) {
  
  ecode_ = value;
  // @@protoc_insertion_point(field_set:EvLog.Event.eCode)
}

// .EvLog.TD td = 3;
bool Event::has_td() const {
  return this != internal_default_instance() && td_ != NULL;
}
void Event::clear_td() {
  if (GetArenaNoVirtual() == NULL && td_ != NULL) delete td_;
  td_ = NULL;
}
const ::EvLog::TD& Event::td() const {
  // @@protoc_insertion_point(field_get:EvLog.Event.td)
  return td_ != NULL ? *td_
                         : *::EvLog::TD::internal_default_instance();
}
::EvLog::TD* Event::mutable_td() {
  
  if (td_ == NULL) {
    td_ = new ::EvLog::TD;
  }
  // @@protoc_insertion_point(field_mutable:EvLog.Event.td)
  return td_;
}
::EvLog::TD* Event::release_td() {
  // @@protoc_insertion_point(field_release:EvLog.Event.td)
  
  ::EvLog::TD* temp = td_;
  td_ = NULL;
  return temp;
}
void Event::set_allocated_td(::EvLog::TD* td) {
  delete td_;
  td_ = td;
  if (td) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:EvLog.Event.td)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventLog::kEventsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventLog::EventLog()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_EventLog_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:EvLog.EventLog)
}
EventLog::EventLog(const EventLog& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      events_(from.events_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:EvLog.EventLog)
}

void EventLog::SharedCtor() {
  _cached_size_ = 0;
}

EventLog::~EventLog() {
  // @@protoc_insertion_point(destructor:EvLog.EventLog)
  SharedDtor();
}

void EventLog::SharedDtor() {
}

void EventLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EventLog& EventLog::default_instance() {
  protobuf_EventLog_2eproto::InitDefaults();
  return *internal_default_instance();
}

EventLog* EventLog::New(::google::protobuf::Arena* arena) const {
  EventLog* n = new EventLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EventLog::Clear() {
// @@protoc_insertion_point(message_clear_start:EvLog.EventLog)
  events_.Clear();
}

bool EventLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EvLog.EventLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .EvLog.Event Events = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EvLog.EventLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EvLog.EventLog)
  return false;
#undef DO_
}

void EventLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EvLog.EventLog)
  // repeated .EvLog.Event Events = 1;
  for (unsigned int i = 0, n = this->events_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->events(i), output);
  }

  // @@protoc_insertion_point(serialize_end:EvLog.EventLog)
}

size_t EventLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EvLog.EventLog)
  size_t total_size = 0;

  // repeated .EvLog.Event Events = 1;
  {
    unsigned int count = this->events_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->events(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventLog::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EventLog*>(&from));
}

void EventLog::MergeFrom(const EventLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EvLog.EventLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  events_.MergeFrom(from.events_);
}

void EventLog::CopyFrom(const EventLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EvLog.EventLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventLog::IsInitialized() const {
  return true;
}

void EventLog::Swap(EventLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventLog::InternalSwap(EventLog* other) {
  events_.UnsafeArenaSwap(&other->events_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string EventLog::GetTypeName() const {
  return "EvLog.EventLog";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EventLog

// repeated .EvLog.Event Events = 1;
int EventLog::events_size() const {
  return events_.size();
}
void EventLog::clear_events() {
  events_.Clear();
}
const ::EvLog::Event& EventLog::events(int index) const {
  // @@protoc_insertion_point(field_get:EvLog.EventLog.Events)
  return events_.Get(index);
}
::EvLog::Event* EventLog::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:EvLog.EventLog.Events)
  return events_.Mutable(index);
}
::EvLog::Event* EventLog::add_events() {
  // @@protoc_insertion_point(field_add:EvLog.EventLog.Events)
  return events_.Add();
}
::google::protobuf::RepeatedPtrField< ::EvLog::Event >*
EventLog::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:EvLog.EventLog.Events)
  return &events_;
}
const ::google::protobuf::RepeatedPtrField< ::EvLog::Event >&
EventLog::events() const {
  // @@protoc_insertion_point(field_list:EvLog.EventLog.Events)
  return events_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace EvLog

// @@protoc_insertion_point(global_scope)
